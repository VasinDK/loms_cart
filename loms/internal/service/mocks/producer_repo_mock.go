// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/internal/service.Producer -o producer_repo_mock.go -n ProducerRepoMock -p mocks

import (
	"route256/loms/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProducerRepoMock implements service.Producer
type ProducerRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetPartition          func(i1 int32) (i2 int32)
	inspectFuncGetPartition   func(i1 int32)
	afterGetPartitionCounter  uint64
	beforeGetPartitionCounter uint64
	GetPartitionMock          mProducerRepoMockGetPartition

	funcMessagePush          func(pp1 *model.ProducerMessage)
	inspectFuncMessagePush   func(pp1 *model.ProducerMessage)
	afterMessagePushCounter  uint64
	beforeMessagePushCounter uint64
	MessagePushMock          mProducerRepoMockMessagePush
}

// NewProducerRepoMock returns a mock for service.Producer
func NewProducerRepoMock(t minimock.Tester) *ProducerRepoMock {
	m := &ProducerRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetPartitionMock = mProducerRepoMockGetPartition{mock: m}
	m.GetPartitionMock.callArgs = []*ProducerRepoMockGetPartitionParams{}

	m.MessagePushMock = mProducerRepoMockMessagePush{mock: m}
	m.MessagePushMock.callArgs = []*ProducerRepoMockMessagePushParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProducerRepoMockGetPartition struct {
	optional           bool
	mock               *ProducerRepoMock
	defaultExpectation *ProducerRepoMockGetPartitionExpectation
	expectations       []*ProducerRepoMockGetPartitionExpectation

	callArgs []*ProducerRepoMockGetPartitionParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ProducerRepoMockGetPartitionExpectation specifies expectation struct of the Producer.GetPartition
type ProducerRepoMockGetPartitionExpectation struct {
	mock      *ProducerRepoMock
	params    *ProducerRepoMockGetPartitionParams
	paramPtrs *ProducerRepoMockGetPartitionParamPtrs
	results   *ProducerRepoMockGetPartitionResults
	Counter   uint64
}

// ProducerRepoMockGetPartitionParams contains parameters of the Producer.GetPartition
type ProducerRepoMockGetPartitionParams struct {
	i1 int32
}

// ProducerRepoMockGetPartitionParamPtrs contains pointers to parameters of the Producer.GetPartition
type ProducerRepoMockGetPartitionParamPtrs struct {
	i1 *int32
}

// ProducerRepoMockGetPartitionResults contains results of the Producer.GetPartition
type ProducerRepoMockGetPartitionResults struct {
	i2 int32
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetPartition *mProducerRepoMockGetPartition) Optional() *mProducerRepoMockGetPartition {
	mmGetPartition.optional = true
	return mmGetPartition
}

// Expect sets up expected params for Producer.GetPartition
func (mmGetPartition *mProducerRepoMockGetPartition) Expect(i1 int32) *mProducerRepoMockGetPartition {
	if mmGetPartition.mock.funcGetPartition != nil {
		mmGetPartition.mock.t.Fatalf("ProducerRepoMock.GetPartition mock is already set by Set")
	}

	if mmGetPartition.defaultExpectation == nil {
		mmGetPartition.defaultExpectation = &ProducerRepoMockGetPartitionExpectation{}
	}

	if mmGetPartition.defaultExpectation.paramPtrs != nil {
		mmGetPartition.mock.t.Fatalf("ProducerRepoMock.GetPartition mock is already set by ExpectParams functions")
	}

	mmGetPartition.defaultExpectation.params = &ProducerRepoMockGetPartitionParams{i1}
	for _, e := range mmGetPartition.expectations {
		if minimock.Equal(e.params, mmGetPartition.defaultExpectation.params) {
			mmGetPartition.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPartition.defaultExpectation.params)
		}
	}

	return mmGetPartition
}

// ExpectI1Param1 sets up expected param i1 for Producer.GetPartition
func (mmGetPartition *mProducerRepoMockGetPartition) ExpectI1Param1(i1 int32) *mProducerRepoMockGetPartition {
	if mmGetPartition.mock.funcGetPartition != nil {
		mmGetPartition.mock.t.Fatalf("ProducerRepoMock.GetPartition mock is already set by Set")
	}

	if mmGetPartition.defaultExpectation == nil {
		mmGetPartition.defaultExpectation = &ProducerRepoMockGetPartitionExpectation{}
	}

	if mmGetPartition.defaultExpectation.params != nil {
		mmGetPartition.mock.t.Fatalf("ProducerRepoMock.GetPartition mock is already set by Expect")
	}

	if mmGetPartition.defaultExpectation.paramPtrs == nil {
		mmGetPartition.defaultExpectation.paramPtrs = &ProducerRepoMockGetPartitionParamPtrs{}
	}
	mmGetPartition.defaultExpectation.paramPtrs.i1 = &i1

	return mmGetPartition
}

// Inspect accepts an inspector function that has same arguments as the Producer.GetPartition
func (mmGetPartition *mProducerRepoMockGetPartition) Inspect(f func(i1 int32)) *mProducerRepoMockGetPartition {
	if mmGetPartition.mock.inspectFuncGetPartition != nil {
		mmGetPartition.mock.t.Fatalf("Inspect function is already set for ProducerRepoMock.GetPartition")
	}

	mmGetPartition.mock.inspectFuncGetPartition = f

	return mmGetPartition
}

// Return sets up results that will be returned by Producer.GetPartition
func (mmGetPartition *mProducerRepoMockGetPartition) Return(i2 int32) *ProducerRepoMock {
	if mmGetPartition.mock.funcGetPartition != nil {
		mmGetPartition.mock.t.Fatalf("ProducerRepoMock.GetPartition mock is already set by Set")
	}

	if mmGetPartition.defaultExpectation == nil {
		mmGetPartition.defaultExpectation = &ProducerRepoMockGetPartitionExpectation{mock: mmGetPartition.mock}
	}
	mmGetPartition.defaultExpectation.results = &ProducerRepoMockGetPartitionResults{i2}
	return mmGetPartition.mock
}

// Set uses given function f to mock the Producer.GetPartition method
func (mmGetPartition *mProducerRepoMockGetPartition) Set(f func(i1 int32) (i2 int32)) *ProducerRepoMock {
	if mmGetPartition.defaultExpectation != nil {
		mmGetPartition.mock.t.Fatalf("Default expectation is already set for the Producer.GetPartition method")
	}

	if len(mmGetPartition.expectations) > 0 {
		mmGetPartition.mock.t.Fatalf("Some expectations are already set for the Producer.GetPartition method")
	}

	mmGetPartition.mock.funcGetPartition = f
	return mmGetPartition.mock
}

// When sets expectation for the Producer.GetPartition which will trigger the result defined by the following
// Then helper
func (mmGetPartition *mProducerRepoMockGetPartition) When(i1 int32) *ProducerRepoMockGetPartitionExpectation {
	if mmGetPartition.mock.funcGetPartition != nil {
		mmGetPartition.mock.t.Fatalf("ProducerRepoMock.GetPartition mock is already set by Set")
	}

	expectation := &ProducerRepoMockGetPartitionExpectation{
		mock:   mmGetPartition.mock,
		params: &ProducerRepoMockGetPartitionParams{i1},
	}
	mmGetPartition.expectations = append(mmGetPartition.expectations, expectation)
	return expectation
}

// Then sets up Producer.GetPartition return parameters for the expectation previously defined by the When method
func (e *ProducerRepoMockGetPartitionExpectation) Then(i2 int32) *ProducerRepoMock {
	e.results = &ProducerRepoMockGetPartitionResults{i2}
	return e.mock
}

// Times sets number of times Producer.GetPartition should be invoked
func (mmGetPartition *mProducerRepoMockGetPartition) Times(n uint64) *mProducerRepoMockGetPartition {
	if n == 0 {
		mmGetPartition.mock.t.Fatalf("Times of ProducerRepoMock.GetPartition mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetPartition.expectedInvocations, n)
	return mmGetPartition
}

func (mmGetPartition *mProducerRepoMockGetPartition) invocationsDone() bool {
	if len(mmGetPartition.expectations) == 0 && mmGetPartition.defaultExpectation == nil && mmGetPartition.mock.funcGetPartition == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetPartition.mock.afterGetPartitionCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetPartition.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetPartition implements service.Producer
func (mmGetPartition *ProducerRepoMock) GetPartition(i1 int32) (i2 int32) {
	mm_atomic.AddUint64(&mmGetPartition.beforeGetPartitionCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPartition.afterGetPartitionCounter, 1)

	if mmGetPartition.inspectFuncGetPartition != nil {
		mmGetPartition.inspectFuncGetPartition(i1)
	}

	mm_params := ProducerRepoMockGetPartitionParams{i1}

	// Record call args
	mmGetPartition.GetPartitionMock.mutex.Lock()
	mmGetPartition.GetPartitionMock.callArgs = append(mmGetPartition.GetPartitionMock.callArgs, &mm_params)
	mmGetPartition.GetPartitionMock.mutex.Unlock()

	for _, e := range mmGetPartition.GetPartitionMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i2
		}
	}

	if mmGetPartition.GetPartitionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPartition.GetPartitionMock.defaultExpectation.Counter, 1)
		mm_want := mmGetPartition.GetPartitionMock.defaultExpectation.params
		mm_want_ptrs := mmGetPartition.GetPartitionMock.defaultExpectation.paramPtrs

		mm_got := ProducerRepoMockGetPartitionParams{i1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmGetPartition.t.Errorf("ProducerRepoMock.GetPartition got unexpected parameter i1, want: %#v, got: %#v%s\n", *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetPartition.t.Errorf("ProducerRepoMock.GetPartition got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetPartition.GetPartitionMock.defaultExpectation.results
		if mm_results == nil {
			mmGetPartition.t.Fatal("No results are set for the ProducerRepoMock.GetPartition")
		}
		return (*mm_results).i2
	}
	if mmGetPartition.funcGetPartition != nil {
		return mmGetPartition.funcGetPartition(i1)
	}
	mmGetPartition.t.Fatalf("Unexpected call to ProducerRepoMock.GetPartition. %v", i1)
	return
}

// GetPartitionAfterCounter returns a count of finished ProducerRepoMock.GetPartition invocations
func (mmGetPartition *ProducerRepoMock) GetPartitionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPartition.afterGetPartitionCounter)
}

// GetPartitionBeforeCounter returns a count of ProducerRepoMock.GetPartition invocations
func (mmGetPartition *ProducerRepoMock) GetPartitionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPartition.beforeGetPartitionCounter)
}

// Calls returns a list of arguments used in each call to ProducerRepoMock.GetPartition.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPartition *mProducerRepoMockGetPartition) Calls() []*ProducerRepoMockGetPartitionParams {
	mmGetPartition.mutex.RLock()

	argCopy := make([]*ProducerRepoMockGetPartitionParams, len(mmGetPartition.callArgs))
	copy(argCopy, mmGetPartition.callArgs)

	mmGetPartition.mutex.RUnlock()

	return argCopy
}

// MinimockGetPartitionDone returns true if the count of the GetPartition invocations corresponds
// the number of defined expectations
func (m *ProducerRepoMock) MinimockGetPartitionDone() bool {
	if m.GetPartitionMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetPartitionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetPartitionMock.invocationsDone()
}

// MinimockGetPartitionInspect logs each unmet expectation
func (m *ProducerRepoMock) MinimockGetPartitionInspect() {
	for _, e := range m.GetPartitionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProducerRepoMock.GetPartition with params: %#v", *e.params)
		}
	}

	afterGetPartitionCounter := mm_atomic.LoadUint64(&m.afterGetPartitionCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetPartitionMock.defaultExpectation != nil && afterGetPartitionCounter < 1 {
		if m.GetPartitionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProducerRepoMock.GetPartition")
		} else {
			m.t.Errorf("Expected call to ProducerRepoMock.GetPartition with params: %#v", *m.GetPartitionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPartition != nil && afterGetPartitionCounter < 1 {
		m.t.Error("Expected call to ProducerRepoMock.GetPartition")
	}

	if !m.GetPartitionMock.invocationsDone() && afterGetPartitionCounter > 0 {
		m.t.Errorf("Expected %d calls to ProducerRepoMock.GetPartition but found %d calls",
			mm_atomic.LoadUint64(&m.GetPartitionMock.expectedInvocations), afterGetPartitionCounter)
	}
}

type mProducerRepoMockMessagePush struct {
	optional           bool
	mock               *ProducerRepoMock
	defaultExpectation *ProducerRepoMockMessagePushExpectation
	expectations       []*ProducerRepoMockMessagePushExpectation

	callArgs []*ProducerRepoMockMessagePushParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// ProducerRepoMockMessagePushExpectation specifies expectation struct of the Producer.MessagePush
type ProducerRepoMockMessagePushExpectation struct {
	mock      *ProducerRepoMock
	params    *ProducerRepoMockMessagePushParams
	paramPtrs *ProducerRepoMockMessagePushParamPtrs

	Counter uint64
}

// ProducerRepoMockMessagePushParams contains parameters of the Producer.MessagePush
type ProducerRepoMockMessagePushParams struct {
	pp1 *model.ProducerMessage
}

// ProducerRepoMockMessagePushParamPtrs contains pointers to parameters of the Producer.MessagePush
type ProducerRepoMockMessagePushParamPtrs struct {
	pp1 **model.ProducerMessage
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmMessagePush *mProducerRepoMockMessagePush) Optional() *mProducerRepoMockMessagePush {
	mmMessagePush.optional = true
	return mmMessagePush
}

// Expect sets up expected params for Producer.MessagePush
func (mmMessagePush *mProducerRepoMockMessagePush) Expect(pp1 *model.ProducerMessage) *mProducerRepoMockMessagePush {
	if mmMessagePush.mock.funcMessagePush != nil {
		mmMessagePush.mock.t.Fatalf("ProducerRepoMock.MessagePush mock is already set by Set")
	}

	if mmMessagePush.defaultExpectation == nil {
		mmMessagePush.defaultExpectation = &ProducerRepoMockMessagePushExpectation{}
	}

	if mmMessagePush.defaultExpectation.paramPtrs != nil {
		mmMessagePush.mock.t.Fatalf("ProducerRepoMock.MessagePush mock is already set by ExpectParams functions")
	}

	mmMessagePush.defaultExpectation.params = &ProducerRepoMockMessagePushParams{pp1}
	for _, e := range mmMessagePush.expectations {
		if minimock.Equal(e.params, mmMessagePush.defaultExpectation.params) {
			mmMessagePush.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMessagePush.defaultExpectation.params)
		}
	}

	return mmMessagePush
}

// ExpectPp1Param1 sets up expected param pp1 for Producer.MessagePush
func (mmMessagePush *mProducerRepoMockMessagePush) ExpectPp1Param1(pp1 *model.ProducerMessage) *mProducerRepoMockMessagePush {
	if mmMessagePush.mock.funcMessagePush != nil {
		mmMessagePush.mock.t.Fatalf("ProducerRepoMock.MessagePush mock is already set by Set")
	}

	if mmMessagePush.defaultExpectation == nil {
		mmMessagePush.defaultExpectation = &ProducerRepoMockMessagePushExpectation{}
	}

	if mmMessagePush.defaultExpectation.params != nil {
		mmMessagePush.mock.t.Fatalf("ProducerRepoMock.MessagePush mock is already set by Expect")
	}

	if mmMessagePush.defaultExpectation.paramPtrs == nil {
		mmMessagePush.defaultExpectation.paramPtrs = &ProducerRepoMockMessagePushParamPtrs{}
	}
	mmMessagePush.defaultExpectation.paramPtrs.pp1 = &pp1

	return mmMessagePush
}

// Inspect accepts an inspector function that has same arguments as the Producer.MessagePush
func (mmMessagePush *mProducerRepoMockMessagePush) Inspect(f func(pp1 *model.ProducerMessage)) *mProducerRepoMockMessagePush {
	if mmMessagePush.mock.inspectFuncMessagePush != nil {
		mmMessagePush.mock.t.Fatalf("Inspect function is already set for ProducerRepoMock.MessagePush")
	}

	mmMessagePush.mock.inspectFuncMessagePush = f

	return mmMessagePush
}

// Return sets up results that will be returned by Producer.MessagePush
func (mmMessagePush *mProducerRepoMockMessagePush) Return() *ProducerRepoMock {
	if mmMessagePush.mock.funcMessagePush != nil {
		mmMessagePush.mock.t.Fatalf("ProducerRepoMock.MessagePush mock is already set by Set")
	}

	if mmMessagePush.defaultExpectation == nil {
		mmMessagePush.defaultExpectation = &ProducerRepoMockMessagePushExpectation{mock: mmMessagePush.mock}
	}

	return mmMessagePush.mock
}

// Set uses given function f to mock the Producer.MessagePush method
func (mmMessagePush *mProducerRepoMockMessagePush) Set(f func(pp1 *model.ProducerMessage)) *ProducerRepoMock {
	if mmMessagePush.defaultExpectation != nil {
		mmMessagePush.mock.t.Fatalf("Default expectation is already set for the Producer.MessagePush method")
	}

	if len(mmMessagePush.expectations) > 0 {
		mmMessagePush.mock.t.Fatalf("Some expectations are already set for the Producer.MessagePush method")
	}

	mmMessagePush.mock.funcMessagePush = f
	return mmMessagePush.mock
}

// Times sets number of times Producer.MessagePush should be invoked
func (mmMessagePush *mProducerRepoMockMessagePush) Times(n uint64) *mProducerRepoMockMessagePush {
	if n == 0 {
		mmMessagePush.mock.t.Fatalf("Times of ProducerRepoMock.MessagePush mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmMessagePush.expectedInvocations, n)
	return mmMessagePush
}

func (mmMessagePush *mProducerRepoMockMessagePush) invocationsDone() bool {
	if len(mmMessagePush.expectations) == 0 && mmMessagePush.defaultExpectation == nil && mmMessagePush.mock.funcMessagePush == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmMessagePush.mock.afterMessagePushCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmMessagePush.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// MessagePush implements service.Producer
func (mmMessagePush *ProducerRepoMock) MessagePush(pp1 *model.ProducerMessage) {
	mm_atomic.AddUint64(&mmMessagePush.beforeMessagePushCounter, 1)
	defer mm_atomic.AddUint64(&mmMessagePush.afterMessagePushCounter, 1)

	if mmMessagePush.inspectFuncMessagePush != nil {
		mmMessagePush.inspectFuncMessagePush(pp1)
	}

	mm_params := ProducerRepoMockMessagePushParams{pp1}

	// Record call args
	mmMessagePush.MessagePushMock.mutex.Lock()
	mmMessagePush.MessagePushMock.callArgs = append(mmMessagePush.MessagePushMock.callArgs, &mm_params)
	mmMessagePush.MessagePushMock.mutex.Unlock()

	for _, e := range mmMessagePush.MessagePushMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmMessagePush.MessagePushMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMessagePush.MessagePushMock.defaultExpectation.Counter, 1)
		mm_want := mmMessagePush.MessagePushMock.defaultExpectation.params
		mm_want_ptrs := mmMessagePush.MessagePushMock.defaultExpectation.paramPtrs

		mm_got := ProducerRepoMockMessagePushParams{pp1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.pp1 != nil && !minimock.Equal(*mm_want_ptrs.pp1, mm_got.pp1) {
				mmMessagePush.t.Errorf("ProducerRepoMock.MessagePush got unexpected parameter pp1, want: %#v, got: %#v%s\n", *mm_want_ptrs.pp1, mm_got.pp1, minimock.Diff(*mm_want_ptrs.pp1, mm_got.pp1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmMessagePush.t.Errorf("ProducerRepoMock.MessagePush got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmMessagePush.funcMessagePush != nil {
		mmMessagePush.funcMessagePush(pp1)
		return
	}
	mmMessagePush.t.Fatalf("Unexpected call to ProducerRepoMock.MessagePush. %v", pp1)

}

// MessagePushAfterCounter returns a count of finished ProducerRepoMock.MessagePush invocations
func (mmMessagePush *ProducerRepoMock) MessagePushAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMessagePush.afterMessagePushCounter)
}

// MessagePushBeforeCounter returns a count of ProducerRepoMock.MessagePush invocations
func (mmMessagePush *ProducerRepoMock) MessagePushBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMessagePush.beforeMessagePushCounter)
}

// Calls returns a list of arguments used in each call to ProducerRepoMock.MessagePush.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMessagePush *mProducerRepoMockMessagePush) Calls() []*ProducerRepoMockMessagePushParams {
	mmMessagePush.mutex.RLock()

	argCopy := make([]*ProducerRepoMockMessagePushParams, len(mmMessagePush.callArgs))
	copy(argCopy, mmMessagePush.callArgs)

	mmMessagePush.mutex.RUnlock()

	return argCopy
}

// MinimockMessagePushDone returns true if the count of the MessagePush invocations corresponds
// the number of defined expectations
func (m *ProducerRepoMock) MinimockMessagePushDone() bool {
	if m.MessagePushMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.MessagePushMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.MessagePushMock.invocationsDone()
}

// MinimockMessagePushInspect logs each unmet expectation
func (m *ProducerRepoMock) MinimockMessagePushInspect() {
	for _, e := range m.MessagePushMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProducerRepoMock.MessagePush with params: %#v", *e.params)
		}
	}

	afterMessagePushCounter := mm_atomic.LoadUint64(&m.afterMessagePushCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.MessagePushMock.defaultExpectation != nil && afterMessagePushCounter < 1 {
		if m.MessagePushMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ProducerRepoMock.MessagePush")
		} else {
			m.t.Errorf("Expected call to ProducerRepoMock.MessagePush with params: %#v", *m.MessagePushMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMessagePush != nil && afterMessagePushCounter < 1 {
		m.t.Error("Expected call to ProducerRepoMock.MessagePush")
	}

	if !m.MessagePushMock.invocationsDone() && afterMessagePushCounter > 0 {
		m.t.Errorf("Expected %d calls to ProducerRepoMock.MessagePush but found %d calls",
			mm_atomic.LoadUint64(&m.MessagePushMock.expectedInvocations), afterMessagePushCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProducerRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetPartitionInspect()

			m.MinimockMessagePushInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProducerRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProducerRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetPartitionDone() &&
		m.MinimockMessagePushDone()
}
