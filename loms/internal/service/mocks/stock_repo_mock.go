// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mocks

//go:generate minimock -i route256/loms/internal/service.StockRepo -o stock_repo_mock.go -n StockRepoMock -p mocks

import (
	"context"
	"route256/loms/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// StockRepoMock implements service.StockRepo
type StockRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetStockItemBySku          func(ctx context.Context, u1 uint32) (sp1 *model.StockItem, err error)
	inspectFuncGetStockItemBySku   func(ctx context.Context, u1 uint32)
	afterGetStockItemBySkuCounter  uint64
	beforeGetStockItemBySkuCounter uint64
	GetStockItemBySkuMock          mStockRepoMockGetStockItemBySku

	funcReserve          func(ctx context.Context, op1 *model.OrderItem) (err error)
	inspectFuncReserve   func(ctx context.Context, op1 *model.OrderItem)
	afterReserveCounter  uint64
	beforeReserveCounter uint64
	ReserveMock          mStockRepoMockReserve

	funcReserveRemove          func(ctx context.Context, op1 *model.OrderItem) (err error)
	inspectFuncReserveRemove   func(ctx context.Context, op1 *model.OrderItem)
	afterReserveRemoveCounter  uint64
	beforeReserveRemoveCounter uint64
	ReserveRemoveMock          mStockRepoMockReserveRemove

	funcStockRemoveItem          func(ctx context.Context, op1 *model.OrderItem) (err error)
	inspectFuncStockRemoveItem   func(ctx context.Context, op1 *model.OrderItem)
	afterStockRemoveItemCounter  uint64
	beforeStockRemoveItemCounter uint64
	StockRemoveItemMock          mStockRepoMockStockRemoveItem
}

// NewStockRepoMock returns a mock for service.StockRepo
func NewStockRepoMock(t minimock.Tester) *StockRepoMock {
	m := &StockRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetStockItemBySkuMock = mStockRepoMockGetStockItemBySku{mock: m}
	m.GetStockItemBySkuMock.callArgs = []*StockRepoMockGetStockItemBySkuParams{}

	m.ReserveMock = mStockRepoMockReserve{mock: m}
	m.ReserveMock.callArgs = []*StockRepoMockReserveParams{}

	m.ReserveRemoveMock = mStockRepoMockReserveRemove{mock: m}
	m.ReserveRemoveMock.callArgs = []*StockRepoMockReserveRemoveParams{}

	m.StockRemoveItemMock = mStockRepoMockStockRemoveItem{mock: m}
	m.StockRemoveItemMock.callArgs = []*StockRepoMockStockRemoveItemParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mStockRepoMockGetStockItemBySku struct {
	optional           bool
	mock               *StockRepoMock
	defaultExpectation *StockRepoMockGetStockItemBySkuExpectation
	expectations       []*StockRepoMockGetStockItemBySkuExpectation

	callArgs []*StockRepoMockGetStockItemBySkuParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StockRepoMockGetStockItemBySkuExpectation specifies expectation struct of the StockRepo.GetStockItemBySku
type StockRepoMockGetStockItemBySkuExpectation struct {
	mock      *StockRepoMock
	params    *StockRepoMockGetStockItemBySkuParams
	paramPtrs *StockRepoMockGetStockItemBySkuParamPtrs
	results   *StockRepoMockGetStockItemBySkuResults
	Counter   uint64
}

// StockRepoMockGetStockItemBySkuParams contains parameters of the StockRepo.GetStockItemBySku
type StockRepoMockGetStockItemBySkuParams struct {
	ctx context.Context
	u1  uint32
}

// StockRepoMockGetStockItemBySkuParamPtrs contains pointers to parameters of the StockRepo.GetStockItemBySku
type StockRepoMockGetStockItemBySkuParamPtrs struct {
	ctx *context.Context
	u1  *uint32
}

// StockRepoMockGetStockItemBySkuResults contains results of the StockRepo.GetStockItemBySku
type StockRepoMockGetStockItemBySkuResults struct {
	sp1 *model.StockItem
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) Optional() *mStockRepoMockGetStockItemBySku {
	mmGetStockItemBySku.optional = true
	return mmGetStockItemBySku
}

// Expect sets up expected params for StockRepo.GetStockItemBySku
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) Expect(ctx context.Context, u1 uint32) *mStockRepoMockGetStockItemBySku {
	if mmGetStockItemBySku.mock.funcGetStockItemBySku != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by Set")
	}

	if mmGetStockItemBySku.defaultExpectation == nil {
		mmGetStockItemBySku.defaultExpectation = &StockRepoMockGetStockItemBySkuExpectation{}
	}

	if mmGetStockItemBySku.defaultExpectation.paramPtrs != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by ExpectParams functions")
	}

	mmGetStockItemBySku.defaultExpectation.params = &StockRepoMockGetStockItemBySkuParams{ctx, u1}
	for _, e := range mmGetStockItemBySku.expectations {
		if minimock.Equal(e.params, mmGetStockItemBySku.defaultExpectation.params) {
			mmGetStockItemBySku.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetStockItemBySku.defaultExpectation.params)
		}
	}

	return mmGetStockItemBySku
}

// ExpectCtxParam1 sets up expected param ctx for StockRepo.GetStockItemBySku
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) ExpectCtxParam1(ctx context.Context) *mStockRepoMockGetStockItemBySku {
	if mmGetStockItemBySku.mock.funcGetStockItemBySku != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by Set")
	}

	if mmGetStockItemBySku.defaultExpectation == nil {
		mmGetStockItemBySku.defaultExpectation = &StockRepoMockGetStockItemBySkuExpectation{}
	}

	if mmGetStockItemBySku.defaultExpectation.params != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by Expect")
	}

	if mmGetStockItemBySku.defaultExpectation.paramPtrs == nil {
		mmGetStockItemBySku.defaultExpectation.paramPtrs = &StockRepoMockGetStockItemBySkuParamPtrs{}
	}
	mmGetStockItemBySku.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetStockItemBySku
}

// ExpectU1Param2 sets up expected param u1 for StockRepo.GetStockItemBySku
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) ExpectU1Param2(u1 uint32) *mStockRepoMockGetStockItemBySku {
	if mmGetStockItemBySku.mock.funcGetStockItemBySku != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by Set")
	}

	if mmGetStockItemBySku.defaultExpectation == nil {
		mmGetStockItemBySku.defaultExpectation = &StockRepoMockGetStockItemBySkuExpectation{}
	}

	if mmGetStockItemBySku.defaultExpectation.params != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by Expect")
	}

	if mmGetStockItemBySku.defaultExpectation.paramPtrs == nil {
		mmGetStockItemBySku.defaultExpectation.paramPtrs = &StockRepoMockGetStockItemBySkuParamPtrs{}
	}
	mmGetStockItemBySku.defaultExpectation.paramPtrs.u1 = &u1

	return mmGetStockItemBySku
}

// Inspect accepts an inspector function that has same arguments as the StockRepo.GetStockItemBySku
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) Inspect(f func(ctx context.Context, u1 uint32)) *mStockRepoMockGetStockItemBySku {
	if mmGetStockItemBySku.mock.inspectFuncGetStockItemBySku != nil {
		mmGetStockItemBySku.mock.t.Fatalf("Inspect function is already set for StockRepoMock.GetStockItemBySku")
	}

	mmGetStockItemBySku.mock.inspectFuncGetStockItemBySku = f

	return mmGetStockItemBySku
}

// Return sets up results that will be returned by StockRepo.GetStockItemBySku
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) Return(sp1 *model.StockItem, err error) *StockRepoMock {
	if mmGetStockItemBySku.mock.funcGetStockItemBySku != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by Set")
	}

	if mmGetStockItemBySku.defaultExpectation == nil {
		mmGetStockItemBySku.defaultExpectation = &StockRepoMockGetStockItemBySkuExpectation{mock: mmGetStockItemBySku.mock}
	}
	mmGetStockItemBySku.defaultExpectation.results = &StockRepoMockGetStockItemBySkuResults{sp1, err}
	return mmGetStockItemBySku.mock
}

// Set uses given function f to mock the StockRepo.GetStockItemBySku method
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) Set(f func(ctx context.Context, u1 uint32) (sp1 *model.StockItem, err error)) *StockRepoMock {
	if mmGetStockItemBySku.defaultExpectation != nil {
		mmGetStockItemBySku.mock.t.Fatalf("Default expectation is already set for the StockRepo.GetStockItemBySku method")
	}

	if len(mmGetStockItemBySku.expectations) > 0 {
		mmGetStockItemBySku.mock.t.Fatalf("Some expectations are already set for the StockRepo.GetStockItemBySku method")
	}

	mmGetStockItemBySku.mock.funcGetStockItemBySku = f
	return mmGetStockItemBySku.mock
}

// When sets expectation for the StockRepo.GetStockItemBySku which will trigger the result defined by the following
// Then helper
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) When(ctx context.Context, u1 uint32) *StockRepoMockGetStockItemBySkuExpectation {
	if mmGetStockItemBySku.mock.funcGetStockItemBySku != nil {
		mmGetStockItemBySku.mock.t.Fatalf("StockRepoMock.GetStockItemBySku mock is already set by Set")
	}

	expectation := &StockRepoMockGetStockItemBySkuExpectation{
		mock:   mmGetStockItemBySku.mock,
		params: &StockRepoMockGetStockItemBySkuParams{ctx, u1},
	}
	mmGetStockItemBySku.expectations = append(mmGetStockItemBySku.expectations, expectation)
	return expectation
}

// Then sets up StockRepo.GetStockItemBySku return parameters for the expectation previously defined by the When method
func (e *StockRepoMockGetStockItemBySkuExpectation) Then(sp1 *model.StockItem, err error) *StockRepoMock {
	e.results = &StockRepoMockGetStockItemBySkuResults{sp1, err}
	return e.mock
}

// Times sets number of times StockRepo.GetStockItemBySku should be invoked
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) Times(n uint64) *mStockRepoMockGetStockItemBySku {
	if n == 0 {
		mmGetStockItemBySku.mock.t.Fatalf("Times of StockRepoMock.GetStockItemBySku mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetStockItemBySku.expectedInvocations, n)
	return mmGetStockItemBySku
}

func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) invocationsDone() bool {
	if len(mmGetStockItemBySku.expectations) == 0 && mmGetStockItemBySku.defaultExpectation == nil && mmGetStockItemBySku.mock.funcGetStockItemBySku == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetStockItemBySku.mock.afterGetStockItemBySkuCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetStockItemBySku.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetStockItemBySku implements service.StockRepo
func (mmGetStockItemBySku *StockRepoMock) GetStockItemBySku(ctx context.Context, u1 uint32) (sp1 *model.StockItem, err error) {
	mm_atomic.AddUint64(&mmGetStockItemBySku.beforeGetStockItemBySkuCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStockItemBySku.afterGetStockItemBySkuCounter, 1)

	if mmGetStockItemBySku.inspectFuncGetStockItemBySku != nil {
		mmGetStockItemBySku.inspectFuncGetStockItemBySku(ctx, u1)
	}

	mm_params := StockRepoMockGetStockItemBySkuParams{ctx, u1}

	// Record call args
	mmGetStockItemBySku.GetStockItemBySkuMock.mutex.Lock()
	mmGetStockItemBySku.GetStockItemBySkuMock.callArgs = append(mmGetStockItemBySku.GetStockItemBySkuMock.callArgs, &mm_params)
	mmGetStockItemBySku.GetStockItemBySkuMock.mutex.Unlock()

	for _, e := range mmGetStockItemBySku.GetStockItemBySkuMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetStockItemBySku.GetStockItemBySkuMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStockItemBySku.GetStockItemBySkuMock.defaultExpectation.Counter, 1)
		mm_want := mmGetStockItemBySku.GetStockItemBySkuMock.defaultExpectation.params
		mm_want_ptrs := mmGetStockItemBySku.GetStockItemBySkuMock.defaultExpectation.paramPtrs

		mm_got := StockRepoMockGetStockItemBySkuParams{ctx, u1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetStockItemBySku.t.Errorf("StockRepoMock.GetStockItemBySku got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.u1 != nil && !minimock.Equal(*mm_want_ptrs.u1, mm_got.u1) {
				mmGetStockItemBySku.t.Errorf("StockRepoMock.GetStockItemBySku got unexpected parameter u1, want: %#v, got: %#v%s\n", *mm_want_ptrs.u1, mm_got.u1, minimock.Diff(*mm_want_ptrs.u1, mm_got.u1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetStockItemBySku.t.Errorf("StockRepoMock.GetStockItemBySku got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetStockItemBySku.GetStockItemBySkuMock.defaultExpectation.results
		if mm_results == nil {
			mmGetStockItemBySku.t.Fatal("No results are set for the StockRepoMock.GetStockItemBySku")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetStockItemBySku.funcGetStockItemBySku != nil {
		return mmGetStockItemBySku.funcGetStockItemBySku(ctx, u1)
	}
	mmGetStockItemBySku.t.Fatalf("Unexpected call to StockRepoMock.GetStockItemBySku. %v %v", ctx, u1)
	return
}

// GetStockItemBySkuAfterCounter returns a count of finished StockRepoMock.GetStockItemBySku invocations
func (mmGetStockItemBySku *StockRepoMock) GetStockItemBySkuAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockItemBySku.afterGetStockItemBySkuCounter)
}

// GetStockItemBySkuBeforeCounter returns a count of StockRepoMock.GetStockItemBySku invocations
func (mmGetStockItemBySku *StockRepoMock) GetStockItemBySkuBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStockItemBySku.beforeGetStockItemBySkuCounter)
}

// Calls returns a list of arguments used in each call to StockRepoMock.GetStockItemBySku.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetStockItemBySku *mStockRepoMockGetStockItemBySku) Calls() []*StockRepoMockGetStockItemBySkuParams {
	mmGetStockItemBySku.mutex.RLock()

	argCopy := make([]*StockRepoMockGetStockItemBySkuParams, len(mmGetStockItemBySku.callArgs))
	copy(argCopy, mmGetStockItemBySku.callArgs)

	mmGetStockItemBySku.mutex.RUnlock()

	return argCopy
}

// MinimockGetStockItemBySkuDone returns true if the count of the GetStockItemBySku invocations corresponds
// the number of defined expectations
func (m *StockRepoMock) MinimockGetStockItemBySkuDone() bool {
	if m.GetStockItemBySkuMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetStockItemBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetStockItemBySkuMock.invocationsDone()
}

// MinimockGetStockItemBySkuInspect logs each unmet expectation
func (m *StockRepoMock) MinimockGetStockItemBySkuInspect() {
	for _, e := range m.GetStockItemBySkuMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepoMock.GetStockItemBySku with params: %#v", *e.params)
		}
	}

	afterGetStockItemBySkuCounter := mm_atomic.LoadUint64(&m.afterGetStockItemBySkuCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetStockItemBySkuMock.defaultExpectation != nil && afterGetStockItemBySkuCounter < 1 {
		if m.GetStockItemBySkuMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepoMock.GetStockItemBySku")
		} else {
			m.t.Errorf("Expected call to StockRepoMock.GetStockItemBySku with params: %#v", *m.GetStockItemBySkuMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStockItemBySku != nil && afterGetStockItemBySkuCounter < 1 {
		m.t.Error("Expected call to StockRepoMock.GetStockItemBySku")
	}

	if !m.GetStockItemBySkuMock.invocationsDone() && afterGetStockItemBySkuCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepoMock.GetStockItemBySku but found %d calls",
			mm_atomic.LoadUint64(&m.GetStockItemBySkuMock.expectedInvocations), afterGetStockItemBySkuCounter)
	}
}

type mStockRepoMockReserve struct {
	optional           bool
	mock               *StockRepoMock
	defaultExpectation *StockRepoMockReserveExpectation
	expectations       []*StockRepoMockReserveExpectation

	callArgs []*StockRepoMockReserveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StockRepoMockReserveExpectation specifies expectation struct of the StockRepo.Reserve
type StockRepoMockReserveExpectation struct {
	mock      *StockRepoMock
	params    *StockRepoMockReserveParams
	paramPtrs *StockRepoMockReserveParamPtrs
	results   *StockRepoMockReserveResults
	Counter   uint64
}

// StockRepoMockReserveParams contains parameters of the StockRepo.Reserve
type StockRepoMockReserveParams struct {
	ctx context.Context
	op1 *model.OrderItem
}

// StockRepoMockReserveParamPtrs contains pointers to parameters of the StockRepo.Reserve
type StockRepoMockReserveParamPtrs struct {
	ctx *context.Context
	op1 **model.OrderItem
}

// StockRepoMockReserveResults contains results of the StockRepo.Reserve
type StockRepoMockReserveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserve *mStockRepoMockReserve) Optional() *mStockRepoMockReserve {
	mmReserve.optional = true
	return mmReserve
}

// Expect sets up expected params for StockRepo.Reserve
func (mmReserve *mStockRepoMockReserve) Expect(ctx context.Context, op1 *model.OrderItem) *mStockRepoMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepoMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.paramPtrs != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by ExpectParams functions")
	}

	mmReserve.defaultExpectation.params = &StockRepoMockReserveParams{ctx, op1}
	for _, e := range mmReserve.expectations {
		if minimock.Equal(e.params, mmReserve.defaultExpectation.params) {
			mmReserve.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserve.defaultExpectation.params)
		}
	}

	return mmReserve
}

// ExpectCtxParam1 sets up expected param ctx for StockRepo.Reserve
func (mmReserve *mStockRepoMockReserve) ExpectCtxParam1(ctx context.Context) *mStockRepoMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepoMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StockRepoMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserve
}

// ExpectOp1Param2 sets up expected param op1 for StockRepo.Reserve
func (mmReserve *mStockRepoMockReserve) ExpectOp1Param2(op1 *model.OrderItem) *mStockRepoMockReserve {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepoMockReserveExpectation{}
	}

	if mmReserve.defaultExpectation.params != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by Expect")
	}

	if mmReserve.defaultExpectation.paramPtrs == nil {
		mmReserve.defaultExpectation.paramPtrs = &StockRepoMockReserveParamPtrs{}
	}
	mmReserve.defaultExpectation.paramPtrs.op1 = &op1

	return mmReserve
}

// Inspect accepts an inspector function that has same arguments as the StockRepo.Reserve
func (mmReserve *mStockRepoMockReserve) Inspect(f func(ctx context.Context, op1 *model.OrderItem)) *mStockRepoMockReserve {
	if mmReserve.mock.inspectFuncReserve != nil {
		mmReserve.mock.t.Fatalf("Inspect function is already set for StockRepoMock.Reserve")
	}

	mmReserve.mock.inspectFuncReserve = f

	return mmReserve
}

// Return sets up results that will be returned by StockRepo.Reserve
func (mmReserve *mStockRepoMockReserve) Return(err error) *StockRepoMock {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by Set")
	}

	if mmReserve.defaultExpectation == nil {
		mmReserve.defaultExpectation = &StockRepoMockReserveExpectation{mock: mmReserve.mock}
	}
	mmReserve.defaultExpectation.results = &StockRepoMockReserveResults{err}
	return mmReserve.mock
}

// Set uses given function f to mock the StockRepo.Reserve method
func (mmReserve *mStockRepoMockReserve) Set(f func(ctx context.Context, op1 *model.OrderItem) (err error)) *StockRepoMock {
	if mmReserve.defaultExpectation != nil {
		mmReserve.mock.t.Fatalf("Default expectation is already set for the StockRepo.Reserve method")
	}

	if len(mmReserve.expectations) > 0 {
		mmReserve.mock.t.Fatalf("Some expectations are already set for the StockRepo.Reserve method")
	}

	mmReserve.mock.funcReserve = f
	return mmReserve.mock
}

// When sets expectation for the StockRepo.Reserve which will trigger the result defined by the following
// Then helper
func (mmReserve *mStockRepoMockReserve) When(ctx context.Context, op1 *model.OrderItem) *StockRepoMockReserveExpectation {
	if mmReserve.mock.funcReserve != nil {
		mmReserve.mock.t.Fatalf("StockRepoMock.Reserve mock is already set by Set")
	}

	expectation := &StockRepoMockReserveExpectation{
		mock:   mmReserve.mock,
		params: &StockRepoMockReserveParams{ctx, op1},
	}
	mmReserve.expectations = append(mmReserve.expectations, expectation)
	return expectation
}

// Then sets up StockRepo.Reserve return parameters for the expectation previously defined by the When method
func (e *StockRepoMockReserveExpectation) Then(err error) *StockRepoMock {
	e.results = &StockRepoMockReserveResults{err}
	return e.mock
}

// Times sets number of times StockRepo.Reserve should be invoked
func (mmReserve *mStockRepoMockReserve) Times(n uint64) *mStockRepoMockReserve {
	if n == 0 {
		mmReserve.mock.t.Fatalf("Times of StockRepoMock.Reserve mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserve.expectedInvocations, n)
	return mmReserve
}

func (mmReserve *mStockRepoMockReserve) invocationsDone() bool {
	if len(mmReserve.expectations) == 0 && mmReserve.defaultExpectation == nil && mmReserve.mock.funcReserve == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserve.mock.afterReserveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserve.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Reserve implements service.StockRepo
func (mmReserve *StockRepoMock) Reserve(ctx context.Context, op1 *model.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmReserve.beforeReserveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserve.afterReserveCounter, 1)

	if mmReserve.inspectFuncReserve != nil {
		mmReserve.inspectFuncReserve(ctx, op1)
	}

	mm_params := StockRepoMockReserveParams{ctx, op1}

	// Record call args
	mmReserve.ReserveMock.mutex.Lock()
	mmReserve.ReserveMock.callArgs = append(mmReserve.ReserveMock.callArgs, &mm_params)
	mmReserve.ReserveMock.mutex.Unlock()

	for _, e := range mmReserve.ReserveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserve.ReserveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserve.ReserveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserve.ReserveMock.defaultExpectation.params
		mm_want_ptrs := mmReserve.ReserveMock.defaultExpectation.paramPtrs

		mm_got := StockRepoMockReserveParams{ctx, op1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserve.t.Errorf("StockRepoMock.Reserve got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.op1 != nil && !minimock.Equal(*mm_want_ptrs.op1, mm_got.op1) {
				mmReserve.t.Errorf("StockRepoMock.Reserve got unexpected parameter op1, want: %#v, got: %#v%s\n", *mm_want_ptrs.op1, mm_got.op1, minimock.Diff(*mm_want_ptrs.op1, mm_got.op1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserve.t.Errorf("StockRepoMock.Reserve got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserve.ReserveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserve.t.Fatal("No results are set for the StockRepoMock.Reserve")
		}
		return (*mm_results).err
	}
	if mmReserve.funcReserve != nil {
		return mmReserve.funcReserve(ctx, op1)
	}
	mmReserve.t.Fatalf("Unexpected call to StockRepoMock.Reserve. %v %v", ctx, op1)
	return
}

// ReserveAfterCounter returns a count of finished StockRepoMock.Reserve invocations
func (mmReserve *StockRepoMock) ReserveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.afterReserveCounter)
}

// ReserveBeforeCounter returns a count of StockRepoMock.Reserve invocations
func (mmReserve *StockRepoMock) ReserveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserve.beforeReserveCounter)
}

// Calls returns a list of arguments used in each call to StockRepoMock.Reserve.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserve *mStockRepoMockReserve) Calls() []*StockRepoMockReserveParams {
	mmReserve.mutex.RLock()

	argCopy := make([]*StockRepoMockReserveParams, len(mmReserve.callArgs))
	copy(argCopy, mmReserve.callArgs)

	mmReserve.mutex.RUnlock()

	return argCopy
}

// MinimockReserveDone returns true if the count of the Reserve invocations corresponds
// the number of defined expectations
func (m *StockRepoMock) MinimockReserveDone() bool {
	if m.ReserveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveMock.invocationsDone()
}

// MinimockReserveInspect logs each unmet expectation
func (m *StockRepoMock) MinimockReserveInspect() {
	for _, e := range m.ReserveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepoMock.Reserve with params: %#v", *e.params)
		}
	}

	afterReserveCounter := mm_atomic.LoadUint64(&m.afterReserveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveMock.defaultExpectation != nil && afterReserveCounter < 1 {
		if m.ReserveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepoMock.Reserve")
		} else {
			m.t.Errorf("Expected call to StockRepoMock.Reserve with params: %#v", *m.ReserveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserve != nil && afterReserveCounter < 1 {
		m.t.Error("Expected call to StockRepoMock.Reserve")
	}

	if !m.ReserveMock.invocationsDone() && afterReserveCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepoMock.Reserve but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveMock.expectedInvocations), afterReserveCounter)
	}
}

type mStockRepoMockReserveRemove struct {
	optional           bool
	mock               *StockRepoMock
	defaultExpectation *StockRepoMockReserveRemoveExpectation
	expectations       []*StockRepoMockReserveRemoveExpectation

	callArgs []*StockRepoMockReserveRemoveParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StockRepoMockReserveRemoveExpectation specifies expectation struct of the StockRepo.ReserveRemove
type StockRepoMockReserveRemoveExpectation struct {
	mock      *StockRepoMock
	params    *StockRepoMockReserveRemoveParams
	paramPtrs *StockRepoMockReserveRemoveParamPtrs
	results   *StockRepoMockReserveRemoveResults
	Counter   uint64
}

// StockRepoMockReserveRemoveParams contains parameters of the StockRepo.ReserveRemove
type StockRepoMockReserveRemoveParams struct {
	ctx context.Context
	op1 *model.OrderItem
}

// StockRepoMockReserveRemoveParamPtrs contains pointers to parameters of the StockRepo.ReserveRemove
type StockRepoMockReserveRemoveParamPtrs struct {
	ctx *context.Context
	op1 **model.OrderItem
}

// StockRepoMockReserveRemoveResults contains results of the StockRepo.ReserveRemove
type StockRepoMockReserveRemoveResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmReserveRemove *mStockRepoMockReserveRemove) Optional() *mStockRepoMockReserveRemove {
	mmReserveRemove.optional = true
	return mmReserveRemove
}

// Expect sets up expected params for StockRepo.ReserveRemove
func (mmReserveRemove *mStockRepoMockReserveRemove) Expect(ctx context.Context, op1 *model.OrderItem) *mStockRepoMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockRepoMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.paramPtrs != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by ExpectParams functions")
	}

	mmReserveRemove.defaultExpectation.params = &StockRepoMockReserveRemoveParams{ctx, op1}
	for _, e := range mmReserveRemove.expectations {
		if minimock.Equal(e.params, mmReserveRemove.defaultExpectation.params) {
			mmReserveRemove.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmReserveRemove.defaultExpectation.params)
		}
	}

	return mmReserveRemove
}

// ExpectCtxParam1 sets up expected param ctx for StockRepo.ReserveRemove
func (mmReserveRemove *mStockRepoMockReserveRemove) ExpectCtxParam1(ctx context.Context) *mStockRepoMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockRepoMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &StockRepoMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.ctx = &ctx

	return mmReserveRemove
}

// ExpectOp1Param2 sets up expected param op1 for StockRepo.ReserveRemove
func (mmReserveRemove *mStockRepoMockReserveRemove) ExpectOp1Param2(op1 *model.OrderItem) *mStockRepoMockReserveRemove {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockRepoMockReserveRemoveExpectation{}
	}

	if mmReserveRemove.defaultExpectation.params != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by Expect")
	}

	if mmReserveRemove.defaultExpectation.paramPtrs == nil {
		mmReserveRemove.defaultExpectation.paramPtrs = &StockRepoMockReserveRemoveParamPtrs{}
	}
	mmReserveRemove.defaultExpectation.paramPtrs.op1 = &op1

	return mmReserveRemove
}

// Inspect accepts an inspector function that has same arguments as the StockRepo.ReserveRemove
func (mmReserveRemove *mStockRepoMockReserveRemove) Inspect(f func(ctx context.Context, op1 *model.OrderItem)) *mStockRepoMockReserveRemove {
	if mmReserveRemove.mock.inspectFuncReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("Inspect function is already set for StockRepoMock.ReserveRemove")
	}

	mmReserveRemove.mock.inspectFuncReserveRemove = f

	return mmReserveRemove
}

// Return sets up results that will be returned by StockRepo.ReserveRemove
func (mmReserveRemove *mStockRepoMockReserveRemove) Return(err error) *StockRepoMock {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by Set")
	}

	if mmReserveRemove.defaultExpectation == nil {
		mmReserveRemove.defaultExpectation = &StockRepoMockReserveRemoveExpectation{mock: mmReserveRemove.mock}
	}
	mmReserveRemove.defaultExpectation.results = &StockRepoMockReserveRemoveResults{err}
	return mmReserveRemove.mock
}

// Set uses given function f to mock the StockRepo.ReserveRemove method
func (mmReserveRemove *mStockRepoMockReserveRemove) Set(f func(ctx context.Context, op1 *model.OrderItem) (err error)) *StockRepoMock {
	if mmReserveRemove.defaultExpectation != nil {
		mmReserveRemove.mock.t.Fatalf("Default expectation is already set for the StockRepo.ReserveRemove method")
	}

	if len(mmReserveRemove.expectations) > 0 {
		mmReserveRemove.mock.t.Fatalf("Some expectations are already set for the StockRepo.ReserveRemove method")
	}

	mmReserveRemove.mock.funcReserveRemove = f
	return mmReserveRemove.mock
}

// When sets expectation for the StockRepo.ReserveRemove which will trigger the result defined by the following
// Then helper
func (mmReserveRemove *mStockRepoMockReserveRemove) When(ctx context.Context, op1 *model.OrderItem) *StockRepoMockReserveRemoveExpectation {
	if mmReserveRemove.mock.funcReserveRemove != nil {
		mmReserveRemove.mock.t.Fatalf("StockRepoMock.ReserveRemove mock is already set by Set")
	}

	expectation := &StockRepoMockReserveRemoveExpectation{
		mock:   mmReserveRemove.mock,
		params: &StockRepoMockReserveRemoveParams{ctx, op1},
	}
	mmReserveRemove.expectations = append(mmReserveRemove.expectations, expectation)
	return expectation
}

// Then sets up StockRepo.ReserveRemove return parameters for the expectation previously defined by the When method
func (e *StockRepoMockReserveRemoveExpectation) Then(err error) *StockRepoMock {
	e.results = &StockRepoMockReserveRemoveResults{err}
	return e.mock
}

// Times sets number of times StockRepo.ReserveRemove should be invoked
func (mmReserveRemove *mStockRepoMockReserveRemove) Times(n uint64) *mStockRepoMockReserveRemove {
	if n == 0 {
		mmReserveRemove.mock.t.Fatalf("Times of StockRepoMock.ReserveRemove mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmReserveRemove.expectedInvocations, n)
	return mmReserveRemove
}

func (mmReserveRemove *mStockRepoMockReserveRemove) invocationsDone() bool {
	if len(mmReserveRemove.expectations) == 0 && mmReserveRemove.defaultExpectation == nil && mmReserveRemove.mock.funcReserveRemove == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmReserveRemove.mock.afterReserveRemoveCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmReserveRemove.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ReserveRemove implements service.StockRepo
func (mmReserveRemove *StockRepoMock) ReserveRemove(ctx context.Context, op1 *model.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmReserveRemove.beforeReserveRemoveCounter, 1)
	defer mm_atomic.AddUint64(&mmReserveRemove.afterReserveRemoveCounter, 1)

	if mmReserveRemove.inspectFuncReserveRemove != nil {
		mmReserveRemove.inspectFuncReserveRemove(ctx, op1)
	}

	mm_params := StockRepoMockReserveRemoveParams{ctx, op1}

	// Record call args
	mmReserveRemove.ReserveRemoveMock.mutex.Lock()
	mmReserveRemove.ReserveRemoveMock.callArgs = append(mmReserveRemove.ReserveRemoveMock.callArgs, &mm_params)
	mmReserveRemove.ReserveRemoveMock.mutex.Unlock()

	for _, e := range mmReserveRemove.ReserveRemoveMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmReserveRemove.ReserveRemoveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmReserveRemove.ReserveRemoveMock.defaultExpectation.Counter, 1)
		mm_want := mmReserveRemove.ReserveRemoveMock.defaultExpectation.params
		mm_want_ptrs := mmReserveRemove.ReserveRemoveMock.defaultExpectation.paramPtrs

		mm_got := StockRepoMockReserveRemoveParams{ctx, op1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmReserveRemove.t.Errorf("StockRepoMock.ReserveRemove got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.op1 != nil && !minimock.Equal(*mm_want_ptrs.op1, mm_got.op1) {
				mmReserveRemove.t.Errorf("StockRepoMock.ReserveRemove got unexpected parameter op1, want: %#v, got: %#v%s\n", *mm_want_ptrs.op1, mm_got.op1, minimock.Diff(*mm_want_ptrs.op1, mm_got.op1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmReserveRemove.t.Errorf("StockRepoMock.ReserveRemove got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmReserveRemove.ReserveRemoveMock.defaultExpectation.results
		if mm_results == nil {
			mmReserveRemove.t.Fatal("No results are set for the StockRepoMock.ReserveRemove")
		}
		return (*mm_results).err
	}
	if mmReserveRemove.funcReserveRemove != nil {
		return mmReserveRemove.funcReserveRemove(ctx, op1)
	}
	mmReserveRemove.t.Fatalf("Unexpected call to StockRepoMock.ReserveRemove. %v %v", ctx, op1)
	return
}

// ReserveRemoveAfterCounter returns a count of finished StockRepoMock.ReserveRemove invocations
func (mmReserveRemove *StockRepoMock) ReserveRemoveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.afterReserveRemoveCounter)
}

// ReserveRemoveBeforeCounter returns a count of StockRepoMock.ReserveRemove invocations
func (mmReserveRemove *StockRepoMock) ReserveRemoveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmReserveRemove.beforeReserveRemoveCounter)
}

// Calls returns a list of arguments used in each call to StockRepoMock.ReserveRemove.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmReserveRemove *mStockRepoMockReserveRemove) Calls() []*StockRepoMockReserveRemoveParams {
	mmReserveRemove.mutex.RLock()

	argCopy := make([]*StockRepoMockReserveRemoveParams, len(mmReserveRemove.callArgs))
	copy(argCopy, mmReserveRemove.callArgs)

	mmReserveRemove.mutex.RUnlock()

	return argCopy
}

// MinimockReserveRemoveDone returns true if the count of the ReserveRemove invocations corresponds
// the number of defined expectations
func (m *StockRepoMock) MinimockReserveRemoveDone() bool {
	if m.ReserveRemoveMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ReserveRemoveMock.invocationsDone()
}

// MinimockReserveRemoveInspect logs each unmet expectation
func (m *StockRepoMock) MinimockReserveRemoveInspect() {
	for _, e := range m.ReserveRemoveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepoMock.ReserveRemove with params: %#v", *e.params)
		}
	}

	afterReserveRemoveCounter := mm_atomic.LoadUint64(&m.afterReserveRemoveCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ReserveRemoveMock.defaultExpectation != nil && afterReserveRemoveCounter < 1 {
		if m.ReserveRemoveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepoMock.ReserveRemove")
		} else {
			m.t.Errorf("Expected call to StockRepoMock.ReserveRemove with params: %#v", *m.ReserveRemoveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcReserveRemove != nil && afterReserveRemoveCounter < 1 {
		m.t.Error("Expected call to StockRepoMock.ReserveRemove")
	}

	if !m.ReserveRemoveMock.invocationsDone() && afterReserveRemoveCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepoMock.ReserveRemove but found %d calls",
			mm_atomic.LoadUint64(&m.ReserveRemoveMock.expectedInvocations), afterReserveRemoveCounter)
	}
}

type mStockRepoMockStockRemoveItem struct {
	optional           bool
	mock               *StockRepoMock
	defaultExpectation *StockRepoMockStockRemoveItemExpectation
	expectations       []*StockRepoMockStockRemoveItemExpectation

	callArgs []*StockRepoMockStockRemoveItemParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// StockRepoMockStockRemoveItemExpectation specifies expectation struct of the StockRepo.StockRemoveItem
type StockRepoMockStockRemoveItemExpectation struct {
	mock      *StockRepoMock
	params    *StockRepoMockStockRemoveItemParams
	paramPtrs *StockRepoMockStockRemoveItemParamPtrs
	results   *StockRepoMockStockRemoveItemResults
	Counter   uint64
}

// StockRepoMockStockRemoveItemParams contains parameters of the StockRepo.StockRemoveItem
type StockRepoMockStockRemoveItemParams struct {
	ctx context.Context
	op1 *model.OrderItem
}

// StockRepoMockStockRemoveItemParamPtrs contains pointers to parameters of the StockRepo.StockRemoveItem
type StockRepoMockStockRemoveItemParamPtrs struct {
	ctx *context.Context
	op1 **model.OrderItem
}

// StockRepoMockStockRemoveItemResults contains results of the StockRepo.StockRemoveItem
type StockRepoMockStockRemoveItemResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) Optional() *mStockRepoMockStockRemoveItem {
	mmStockRemoveItem.optional = true
	return mmStockRemoveItem
}

// Expect sets up expected params for StockRepo.StockRemoveItem
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) Expect(ctx context.Context, op1 *model.OrderItem) *mStockRepoMockStockRemoveItem {
	if mmStockRemoveItem.mock.funcStockRemoveItem != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by Set")
	}

	if mmStockRemoveItem.defaultExpectation == nil {
		mmStockRemoveItem.defaultExpectation = &StockRepoMockStockRemoveItemExpectation{}
	}

	if mmStockRemoveItem.defaultExpectation.paramPtrs != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by ExpectParams functions")
	}

	mmStockRemoveItem.defaultExpectation.params = &StockRepoMockStockRemoveItemParams{ctx, op1}
	for _, e := range mmStockRemoveItem.expectations {
		if minimock.Equal(e.params, mmStockRemoveItem.defaultExpectation.params) {
			mmStockRemoveItem.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStockRemoveItem.defaultExpectation.params)
		}
	}

	return mmStockRemoveItem
}

// ExpectCtxParam1 sets up expected param ctx for StockRepo.StockRemoveItem
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) ExpectCtxParam1(ctx context.Context) *mStockRepoMockStockRemoveItem {
	if mmStockRemoveItem.mock.funcStockRemoveItem != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by Set")
	}

	if mmStockRemoveItem.defaultExpectation == nil {
		mmStockRemoveItem.defaultExpectation = &StockRepoMockStockRemoveItemExpectation{}
	}

	if mmStockRemoveItem.defaultExpectation.params != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by Expect")
	}

	if mmStockRemoveItem.defaultExpectation.paramPtrs == nil {
		mmStockRemoveItem.defaultExpectation.paramPtrs = &StockRepoMockStockRemoveItemParamPtrs{}
	}
	mmStockRemoveItem.defaultExpectation.paramPtrs.ctx = &ctx

	return mmStockRemoveItem
}

// ExpectOp1Param2 sets up expected param op1 for StockRepo.StockRemoveItem
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) ExpectOp1Param2(op1 *model.OrderItem) *mStockRepoMockStockRemoveItem {
	if mmStockRemoveItem.mock.funcStockRemoveItem != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by Set")
	}

	if mmStockRemoveItem.defaultExpectation == nil {
		mmStockRemoveItem.defaultExpectation = &StockRepoMockStockRemoveItemExpectation{}
	}

	if mmStockRemoveItem.defaultExpectation.params != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by Expect")
	}

	if mmStockRemoveItem.defaultExpectation.paramPtrs == nil {
		mmStockRemoveItem.defaultExpectation.paramPtrs = &StockRepoMockStockRemoveItemParamPtrs{}
	}
	mmStockRemoveItem.defaultExpectation.paramPtrs.op1 = &op1

	return mmStockRemoveItem
}

// Inspect accepts an inspector function that has same arguments as the StockRepo.StockRemoveItem
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) Inspect(f func(ctx context.Context, op1 *model.OrderItem)) *mStockRepoMockStockRemoveItem {
	if mmStockRemoveItem.mock.inspectFuncStockRemoveItem != nil {
		mmStockRemoveItem.mock.t.Fatalf("Inspect function is already set for StockRepoMock.StockRemoveItem")
	}

	mmStockRemoveItem.mock.inspectFuncStockRemoveItem = f

	return mmStockRemoveItem
}

// Return sets up results that will be returned by StockRepo.StockRemoveItem
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) Return(err error) *StockRepoMock {
	if mmStockRemoveItem.mock.funcStockRemoveItem != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by Set")
	}

	if mmStockRemoveItem.defaultExpectation == nil {
		mmStockRemoveItem.defaultExpectation = &StockRepoMockStockRemoveItemExpectation{mock: mmStockRemoveItem.mock}
	}
	mmStockRemoveItem.defaultExpectation.results = &StockRepoMockStockRemoveItemResults{err}
	return mmStockRemoveItem.mock
}

// Set uses given function f to mock the StockRepo.StockRemoveItem method
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) Set(f func(ctx context.Context, op1 *model.OrderItem) (err error)) *StockRepoMock {
	if mmStockRemoveItem.defaultExpectation != nil {
		mmStockRemoveItem.mock.t.Fatalf("Default expectation is already set for the StockRepo.StockRemoveItem method")
	}

	if len(mmStockRemoveItem.expectations) > 0 {
		mmStockRemoveItem.mock.t.Fatalf("Some expectations are already set for the StockRepo.StockRemoveItem method")
	}

	mmStockRemoveItem.mock.funcStockRemoveItem = f
	return mmStockRemoveItem.mock
}

// When sets expectation for the StockRepo.StockRemoveItem which will trigger the result defined by the following
// Then helper
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) When(ctx context.Context, op1 *model.OrderItem) *StockRepoMockStockRemoveItemExpectation {
	if mmStockRemoveItem.mock.funcStockRemoveItem != nil {
		mmStockRemoveItem.mock.t.Fatalf("StockRepoMock.StockRemoveItem mock is already set by Set")
	}

	expectation := &StockRepoMockStockRemoveItemExpectation{
		mock:   mmStockRemoveItem.mock,
		params: &StockRepoMockStockRemoveItemParams{ctx, op1},
	}
	mmStockRemoveItem.expectations = append(mmStockRemoveItem.expectations, expectation)
	return expectation
}

// Then sets up StockRepo.StockRemoveItem return parameters for the expectation previously defined by the When method
func (e *StockRepoMockStockRemoveItemExpectation) Then(err error) *StockRepoMock {
	e.results = &StockRepoMockStockRemoveItemResults{err}
	return e.mock
}

// Times sets number of times StockRepo.StockRemoveItem should be invoked
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) Times(n uint64) *mStockRepoMockStockRemoveItem {
	if n == 0 {
		mmStockRemoveItem.mock.t.Fatalf("Times of StockRepoMock.StockRemoveItem mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStockRemoveItem.expectedInvocations, n)
	return mmStockRemoveItem
}

func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) invocationsDone() bool {
	if len(mmStockRemoveItem.expectations) == 0 && mmStockRemoveItem.defaultExpectation == nil && mmStockRemoveItem.mock.funcStockRemoveItem == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStockRemoveItem.mock.afterStockRemoveItemCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStockRemoveItem.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StockRemoveItem implements service.StockRepo
func (mmStockRemoveItem *StockRepoMock) StockRemoveItem(ctx context.Context, op1 *model.OrderItem) (err error) {
	mm_atomic.AddUint64(&mmStockRemoveItem.beforeStockRemoveItemCounter, 1)
	defer mm_atomic.AddUint64(&mmStockRemoveItem.afterStockRemoveItemCounter, 1)

	if mmStockRemoveItem.inspectFuncStockRemoveItem != nil {
		mmStockRemoveItem.inspectFuncStockRemoveItem(ctx, op1)
	}

	mm_params := StockRepoMockStockRemoveItemParams{ctx, op1}

	// Record call args
	mmStockRemoveItem.StockRemoveItemMock.mutex.Lock()
	mmStockRemoveItem.StockRemoveItemMock.callArgs = append(mmStockRemoveItem.StockRemoveItemMock.callArgs, &mm_params)
	mmStockRemoveItem.StockRemoveItemMock.mutex.Unlock()

	for _, e := range mmStockRemoveItem.StockRemoveItemMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmStockRemoveItem.StockRemoveItemMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStockRemoveItem.StockRemoveItemMock.defaultExpectation.Counter, 1)
		mm_want := mmStockRemoveItem.StockRemoveItemMock.defaultExpectation.params
		mm_want_ptrs := mmStockRemoveItem.StockRemoveItemMock.defaultExpectation.paramPtrs

		mm_got := StockRepoMockStockRemoveItemParams{ctx, op1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStockRemoveItem.t.Errorf("StockRepoMock.StockRemoveItem got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.op1 != nil && !minimock.Equal(*mm_want_ptrs.op1, mm_got.op1) {
				mmStockRemoveItem.t.Errorf("StockRepoMock.StockRemoveItem got unexpected parameter op1, want: %#v, got: %#v%s\n", *mm_want_ptrs.op1, mm_got.op1, minimock.Diff(*mm_want_ptrs.op1, mm_got.op1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStockRemoveItem.t.Errorf("StockRepoMock.StockRemoveItem got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStockRemoveItem.StockRemoveItemMock.defaultExpectation.results
		if mm_results == nil {
			mmStockRemoveItem.t.Fatal("No results are set for the StockRepoMock.StockRemoveItem")
		}
		return (*mm_results).err
	}
	if mmStockRemoveItem.funcStockRemoveItem != nil {
		return mmStockRemoveItem.funcStockRemoveItem(ctx, op1)
	}
	mmStockRemoveItem.t.Fatalf("Unexpected call to StockRepoMock.StockRemoveItem. %v %v", ctx, op1)
	return
}

// StockRemoveItemAfterCounter returns a count of finished StockRepoMock.StockRemoveItem invocations
func (mmStockRemoveItem *StockRepoMock) StockRemoveItemAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockRemoveItem.afterStockRemoveItemCounter)
}

// StockRemoveItemBeforeCounter returns a count of StockRepoMock.StockRemoveItem invocations
func (mmStockRemoveItem *StockRepoMock) StockRemoveItemBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockRemoveItem.beforeStockRemoveItemCounter)
}

// Calls returns a list of arguments used in each call to StockRepoMock.StockRemoveItem.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStockRemoveItem *mStockRepoMockStockRemoveItem) Calls() []*StockRepoMockStockRemoveItemParams {
	mmStockRemoveItem.mutex.RLock()

	argCopy := make([]*StockRepoMockStockRemoveItemParams, len(mmStockRemoveItem.callArgs))
	copy(argCopy, mmStockRemoveItem.callArgs)

	mmStockRemoveItem.mutex.RUnlock()

	return argCopy
}

// MinimockStockRemoveItemDone returns true if the count of the StockRemoveItem invocations corresponds
// the number of defined expectations
func (m *StockRepoMock) MinimockStockRemoveItemDone() bool {
	if m.StockRemoveItemMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StockRemoveItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StockRemoveItemMock.invocationsDone()
}

// MinimockStockRemoveItemInspect logs each unmet expectation
func (m *StockRepoMock) MinimockStockRemoveItemInspect() {
	for _, e := range m.StockRemoveItemMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to StockRepoMock.StockRemoveItem with params: %#v", *e.params)
		}
	}

	afterStockRemoveItemCounter := mm_atomic.LoadUint64(&m.afterStockRemoveItemCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StockRemoveItemMock.defaultExpectation != nil && afterStockRemoveItemCounter < 1 {
		if m.StockRemoveItemMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to StockRepoMock.StockRemoveItem")
		} else {
			m.t.Errorf("Expected call to StockRepoMock.StockRemoveItem with params: %#v", *m.StockRemoveItemMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStockRemoveItem != nil && afterStockRemoveItemCounter < 1 {
		m.t.Error("Expected call to StockRepoMock.StockRemoveItem")
	}

	if !m.StockRemoveItemMock.invocationsDone() && afterStockRemoveItemCounter > 0 {
		m.t.Errorf("Expected %d calls to StockRepoMock.StockRemoveItem but found %d calls",
			mm_atomic.LoadUint64(&m.StockRemoveItemMock.expectedInvocations), afterStockRemoveItemCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *StockRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetStockItemBySkuInspect()

			m.MinimockReserveInspect()

			m.MinimockReserveRemoveInspect()

			m.MinimockStockRemoveItemInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *StockRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *StockRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetStockItemBySkuDone() &&
		m.MinimockReserveDone() &&
		m.MinimockReserveRemoveDone() &&
		m.MinimockStockRemoveItemDone()
}
