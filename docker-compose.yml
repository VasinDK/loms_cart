version: "3.8"

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  postgres:
    image: postgres:14.8-alpine3.18
    restart: unless-stopped	
    environment:
      POSTGRES_DB: loms
      POSTGRES_USER: admin_loms
      POSTGRES_PASSWORD: password 
    ports:
      - "5432:5432"
    volumes:
      - ./loms/migrations:/docker-entrypoint-initdb.d	
    networks:
        - app-network

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.com
      PGADMIN_DEFAULT_PASSWORD: SuperSecret
    networks:
        - app-network
  
  loms:
    container_name: loms
    restart: unless-stopped
    environment:
      DB_CONNECTION: "postgres://admin_loms:password@postgres:5432/loms"
      TRACE_END_POINT_URL: "http://jaeger:4318"
      # TOPIC: loms.order-events
      BOOTSTRAP_SERVER: kafka0:29092
    build:
      context: ./loms
      dockerfile: ./build/Dockerfile
    ports:
      - "50051:50051" # grpc
      - "8085:8085"   # http
    depends_on:
      - postgres
    networks:
        - app-network

  cart:
    container_name: cart
    restart: unless-stopped
    environment:
      ADDRESS_STORE_LOMS: loms
      TRACE_END_POINT_URL: "http://jaeger:4318"
    build:
      context: ./cart
      dockerfile: ./build/Dockerfile
    ports:
      - "8082:8082" # http
    depends_on:
      - loms
    networks:
        - app-network

  prometheus:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
        - app-network

  jaeger:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/jaegertracing:latest
    ports:
      - "16686:16686"
      - "4318:4318"    
    networks:
        - app-network

  grafana:
    image: gitlab-registry.ozon.dev/go/classroom-12/students/homework/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
        - app-network
  
  kafka-ui:
    container_name: route256-kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
        - app-network

  kafka0:
    container_name: route256-kafka
    image: confluentinc/cp-kafka:7.5.4
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      BROKERS: kafka0:9092
#    command: "bash -c '/tmp/run_workaround.sh && /etc/confluent/docker/run'"
    networks:
        - app-network

  kafka-init-topics:
    container_name: route256-init-topics
    restart: on-failure	
    image: confluentinc/cp-kafka:7.5.4
    depends_on:
      - kafka0
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:29092 1 30 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"
    networks:
        - app-network
  
  go-consumer-1:
    container_name: route256-go-consumer-1
    image: go-consumer-image
    restart: unless-stopped
    build:
      context: ./notifier
      dockerfile: ./build/Dockerfile
    environment:
      CONSUMER_GROUP: CGName-loms.order-events
      TOPIC: loms.order-events
      BOOTSTRAP_SERVER: kafka0:29092
    depends_on:
      - kafka-init-topics
    networks:
        - app-network

  go-consumer-2:
    container_name: route256-go-consumer-2
    image: go-consumer-image
    restart: unless-stopped
    environment:
      CONSUMER_GROUP: CGName-loms.order-events
      TOPIC: loms.order-events
      BOOTSTRAP_SERVER: kafka0:29092
    depends_on:
      - go-consumer-1
    networks:
        - app-network

  go-consumer-3:
    container_name: route256-go-consumer-3
    image: go-consumer-image
    restart: unless-stopped
    environment:
      CONSUMER_GROUP: CGName-loms.order-events
      TOPIC: loms.order-events
      BOOTSTRAP_SERVER: kafka0:29092
    depends_on:
      - go-consumer-2
    networks:
        - app-network
        
networks:
  app-network:  
    driver: bridge        
