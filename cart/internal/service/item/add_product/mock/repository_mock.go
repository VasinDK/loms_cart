// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/service/item/add_product.Repository -o repository_mock.go -n RepositoryMock -p mock

import (
	"context"
	"route256/cart/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements add_product.Repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddProductCart          func(ctx context.Context, pp1 *model.Product, i1 int64) (err error)
	inspectFuncAddProductCart   func(ctx context.Context, pp1 *model.Product, i1 int64)
	afterAddProductCartCounter  uint64
	beforeAddProductCartCounter uint64
	AddProductCartMock          mRepositoryMockAddProductCart

	funcCheckSKU          func(ctx context.Context, ch1 chan<- *model.Product, i1 int64) (err error)
	inspectFuncCheckSKU   func(ctx context.Context, ch1 chan<- *model.Product, i1 int64)
	afterCheckSKUCounter  uint64
	beforeCheckSKUCounter uint64
	CheckSKUMock          mRepositoryMockCheckSKU

	funcGetProductCart          func(ctx context.Context, pp1 *model.Product, i1 int64) (pp2 *model.Product, err error)
	inspectFuncGetProductCart   func(ctx context.Context, pp1 *model.Product, i1 int64)
	afterGetProductCartCounter  uint64
	beforeGetProductCartCounter uint64
	GetProductCartMock          mRepositoryMockGetProductCart

	funcStockInfo          func(ctx context.Context, i1 int64) (i2 int64, err error)
	inspectFuncStockInfo   func(ctx context.Context, i1 int64)
	afterStockInfoCounter  uint64
	beforeStockInfoCounter uint64
	StockInfoMock          mRepositoryMockStockInfo
}

// NewRepositoryMock returns a mock for add_product.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddProductCartMock = mRepositoryMockAddProductCart{mock: m}
	m.AddProductCartMock.callArgs = []*RepositoryMockAddProductCartParams{}

	m.CheckSKUMock = mRepositoryMockCheckSKU{mock: m}
	m.CheckSKUMock.callArgs = []*RepositoryMockCheckSKUParams{}

	m.GetProductCartMock = mRepositoryMockGetProductCart{mock: m}
	m.GetProductCartMock.callArgs = []*RepositoryMockGetProductCartParams{}

	m.StockInfoMock = mRepositoryMockStockInfo{mock: m}
	m.StockInfoMock.callArgs = []*RepositoryMockStockInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockAddProductCart struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockAddProductCartExpectation
	expectations       []*RepositoryMockAddProductCartExpectation

	callArgs []*RepositoryMockAddProductCartParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockAddProductCartExpectation specifies expectation struct of the Repository.AddProductCart
type RepositoryMockAddProductCartExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockAddProductCartParams
	paramPtrs *RepositoryMockAddProductCartParamPtrs
	results   *RepositoryMockAddProductCartResults
	Counter   uint64
}

// RepositoryMockAddProductCartParams contains parameters of the Repository.AddProductCart
type RepositoryMockAddProductCartParams struct {
	ctx context.Context
	pp1 *model.Product
	i1  int64
}

// RepositoryMockAddProductCartParamPtrs contains pointers to parameters of the Repository.AddProductCart
type RepositoryMockAddProductCartParamPtrs struct {
	ctx *context.Context
	pp1 **model.Product
	i1  *int64
}

// RepositoryMockAddProductCartResults contains results of the Repository.AddProductCart
type RepositoryMockAddProductCartResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddProductCart *mRepositoryMockAddProductCart) Optional() *mRepositoryMockAddProductCart {
	mmAddProductCart.optional = true
	return mmAddProductCart
}

// Expect sets up expected params for Repository.AddProductCart
func (mmAddProductCart *mRepositoryMockAddProductCart) Expect(ctx context.Context, pp1 *model.Product, i1 int64) *mRepositoryMockAddProductCart {
	if mmAddProductCart.mock.funcAddProductCart != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Set")
	}

	if mmAddProductCart.defaultExpectation == nil {
		mmAddProductCart.defaultExpectation = &RepositoryMockAddProductCartExpectation{}
	}

	if mmAddProductCart.defaultExpectation.paramPtrs != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by ExpectParams functions")
	}

	mmAddProductCart.defaultExpectation.params = &RepositoryMockAddProductCartParams{ctx, pp1, i1}
	for _, e := range mmAddProductCart.expectations {
		if minimock.Equal(e.params, mmAddProductCart.defaultExpectation.params) {
			mmAddProductCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddProductCart.defaultExpectation.params)
		}
	}

	return mmAddProductCart
}

// ExpectCtxParam1 sets up expected param ctx for Repository.AddProductCart
func (mmAddProductCart *mRepositoryMockAddProductCart) ExpectCtxParam1(ctx context.Context) *mRepositoryMockAddProductCart {
	if mmAddProductCart.mock.funcAddProductCart != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Set")
	}

	if mmAddProductCart.defaultExpectation == nil {
		mmAddProductCart.defaultExpectation = &RepositoryMockAddProductCartExpectation{}
	}

	if mmAddProductCart.defaultExpectation.params != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Expect")
	}

	if mmAddProductCart.defaultExpectation.paramPtrs == nil {
		mmAddProductCart.defaultExpectation.paramPtrs = &RepositoryMockAddProductCartParamPtrs{}
	}
	mmAddProductCart.defaultExpectation.paramPtrs.ctx = &ctx

	return mmAddProductCart
}

// ExpectPp1Param2 sets up expected param pp1 for Repository.AddProductCart
func (mmAddProductCart *mRepositoryMockAddProductCart) ExpectPp1Param2(pp1 *model.Product) *mRepositoryMockAddProductCart {
	if mmAddProductCart.mock.funcAddProductCart != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Set")
	}

	if mmAddProductCart.defaultExpectation == nil {
		mmAddProductCart.defaultExpectation = &RepositoryMockAddProductCartExpectation{}
	}

	if mmAddProductCart.defaultExpectation.params != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Expect")
	}

	if mmAddProductCart.defaultExpectation.paramPtrs == nil {
		mmAddProductCart.defaultExpectation.paramPtrs = &RepositoryMockAddProductCartParamPtrs{}
	}
	mmAddProductCart.defaultExpectation.paramPtrs.pp1 = &pp1

	return mmAddProductCart
}

// ExpectI1Param3 sets up expected param i1 for Repository.AddProductCart
func (mmAddProductCart *mRepositoryMockAddProductCart) ExpectI1Param3(i1 int64) *mRepositoryMockAddProductCart {
	if mmAddProductCart.mock.funcAddProductCart != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Set")
	}

	if mmAddProductCart.defaultExpectation == nil {
		mmAddProductCart.defaultExpectation = &RepositoryMockAddProductCartExpectation{}
	}

	if mmAddProductCart.defaultExpectation.params != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Expect")
	}

	if mmAddProductCart.defaultExpectation.paramPtrs == nil {
		mmAddProductCart.defaultExpectation.paramPtrs = &RepositoryMockAddProductCartParamPtrs{}
	}
	mmAddProductCart.defaultExpectation.paramPtrs.i1 = &i1

	return mmAddProductCart
}

// Inspect accepts an inspector function that has same arguments as the Repository.AddProductCart
func (mmAddProductCart *mRepositoryMockAddProductCart) Inspect(f func(ctx context.Context, pp1 *model.Product, i1 int64)) *mRepositoryMockAddProductCart {
	if mmAddProductCart.mock.inspectFuncAddProductCart != nil {
		mmAddProductCart.mock.t.Fatalf("Inspect function is already set for RepositoryMock.AddProductCart")
	}

	mmAddProductCart.mock.inspectFuncAddProductCart = f

	return mmAddProductCart
}

// Return sets up results that will be returned by Repository.AddProductCart
func (mmAddProductCart *mRepositoryMockAddProductCart) Return(err error) *RepositoryMock {
	if mmAddProductCart.mock.funcAddProductCart != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Set")
	}

	if mmAddProductCart.defaultExpectation == nil {
		mmAddProductCart.defaultExpectation = &RepositoryMockAddProductCartExpectation{mock: mmAddProductCart.mock}
	}
	mmAddProductCart.defaultExpectation.results = &RepositoryMockAddProductCartResults{err}
	return mmAddProductCart.mock
}

// Set uses given function f to mock the Repository.AddProductCart method
func (mmAddProductCart *mRepositoryMockAddProductCart) Set(f func(ctx context.Context, pp1 *model.Product, i1 int64) (err error)) *RepositoryMock {
	if mmAddProductCart.defaultExpectation != nil {
		mmAddProductCart.mock.t.Fatalf("Default expectation is already set for the Repository.AddProductCart method")
	}

	if len(mmAddProductCart.expectations) > 0 {
		mmAddProductCart.mock.t.Fatalf("Some expectations are already set for the Repository.AddProductCart method")
	}

	mmAddProductCart.mock.funcAddProductCart = f
	return mmAddProductCart.mock
}

// When sets expectation for the Repository.AddProductCart which will trigger the result defined by the following
// Then helper
func (mmAddProductCart *mRepositoryMockAddProductCart) When(ctx context.Context, pp1 *model.Product, i1 int64) *RepositoryMockAddProductCartExpectation {
	if mmAddProductCart.mock.funcAddProductCart != nil {
		mmAddProductCart.mock.t.Fatalf("RepositoryMock.AddProductCart mock is already set by Set")
	}

	expectation := &RepositoryMockAddProductCartExpectation{
		mock:   mmAddProductCart.mock,
		params: &RepositoryMockAddProductCartParams{ctx, pp1, i1},
	}
	mmAddProductCart.expectations = append(mmAddProductCart.expectations, expectation)
	return expectation
}

// Then sets up Repository.AddProductCart return parameters for the expectation previously defined by the When method
func (e *RepositoryMockAddProductCartExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockAddProductCartResults{err}
	return e.mock
}

// Times sets number of times Repository.AddProductCart should be invoked
func (mmAddProductCart *mRepositoryMockAddProductCart) Times(n uint64) *mRepositoryMockAddProductCart {
	if n == 0 {
		mmAddProductCart.mock.t.Fatalf("Times of RepositoryMock.AddProductCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddProductCart.expectedInvocations, n)
	return mmAddProductCart
}

func (mmAddProductCart *mRepositoryMockAddProductCart) invocationsDone() bool {
	if len(mmAddProductCart.expectations) == 0 && mmAddProductCart.defaultExpectation == nil && mmAddProductCart.mock.funcAddProductCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddProductCart.mock.afterAddProductCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddProductCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddProductCart implements add_product.Repository
func (mmAddProductCart *RepositoryMock) AddProductCart(ctx context.Context, pp1 *model.Product, i1 int64) (err error) {
	mm_atomic.AddUint64(&mmAddProductCart.beforeAddProductCartCounter, 1)
	defer mm_atomic.AddUint64(&mmAddProductCart.afterAddProductCartCounter, 1)

	if mmAddProductCart.inspectFuncAddProductCart != nil {
		mmAddProductCart.inspectFuncAddProductCart(ctx, pp1, i1)
	}

	mm_params := RepositoryMockAddProductCartParams{ctx, pp1, i1}

	// Record call args
	mmAddProductCart.AddProductCartMock.mutex.Lock()
	mmAddProductCart.AddProductCartMock.callArgs = append(mmAddProductCart.AddProductCartMock.callArgs, &mm_params)
	mmAddProductCart.AddProductCartMock.mutex.Unlock()

	for _, e := range mmAddProductCart.AddProductCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmAddProductCart.AddProductCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddProductCart.AddProductCartMock.defaultExpectation.Counter, 1)
		mm_want := mmAddProductCart.AddProductCartMock.defaultExpectation.params
		mm_want_ptrs := mmAddProductCart.AddProductCartMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockAddProductCartParams{ctx, pp1, i1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddProductCart.t.Errorf("RepositoryMock.AddProductCart got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pp1 != nil && !minimock.Equal(*mm_want_ptrs.pp1, mm_got.pp1) {
				mmAddProductCart.t.Errorf("RepositoryMock.AddProductCart got unexpected parameter pp1, want: %#v, got: %#v%s\n", *mm_want_ptrs.pp1, mm_got.pp1, minimock.Diff(*mm_want_ptrs.pp1, mm_got.pp1))
			}

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmAddProductCart.t.Errorf("RepositoryMock.AddProductCart got unexpected parameter i1, want: %#v, got: %#v%s\n", *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddProductCart.t.Errorf("RepositoryMock.AddProductCart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddProductCart.AddProductCartMock.defaultExpectation.results
		if mm_results == nil {
			mmAddProductCart.t.Fatal("No results are set for the RepositoryMock.AddProductCart")
		}
		return (*mm_results).err
	}
	if mmAddProductCart.funcAddProductCart != nil {
		return mmAddProductCart.funcAddProductCart(ctx, pp1, i1)
	}
	mmAddProductCart.t.Fatalf("Unexpected call to RepositoryMock.AddProductCart. %v %v %v", ctx, pp1, i1)
	return
}

// AddProductCartAfterCounter returns a count of finished RepositoryMock.AddProductCart invocations
func (mmAddProductCart *RepositoryMock) AddProductCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddProductCart.afterAddProductCartCounter)
}

// AddProductCartBeforeCounter returns a count of RepositoryMock.AddProductCart invocations
func (mmAddProductCart *RepositoryMock) AddProductCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddProductCart.beforeAddProductCartCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.AddProductCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddProductCart *mRepositoryMockAddProductCart) Calls() []*RepositoryMockAddProductCartParams {
	mmAddProductCart.mutex.RLock()

	argCopy := make([]*RepositoryMockAddProductCartParams, len(mmAddProductCart.callArgs))
	copy(argCopy, mmAddProductCart.callArgs)

	mmAddProductCart.mutex.RUnlock()

	return argCopy
}

// MinimockAddProductCartDone returns true if the count of the AddProductCart invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockAddProductCartDone() bool {
	if m.AddProductCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddProductCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddProductCartMock.invocationsDone()
}

// MinimockAddProductCartInspect logs each unmet expectation
func (m *RepositoryMock) MinimockAddProductCartInspect() {
	for _, e := range m.AddProductCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.AddProductCart with params: %#v", *e.params)
		}
	}

	afterAddProductCartCounter := mm_atomic.LoadUint64(&m.afterAddProductCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddProductCartMock.defaultExpectation != nil && afterAddProductCartCounter < 1 {
		if m.AddProductCartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.AddProductCart")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.AddProductCart with params: %#v", *m.AddProductCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddProductCart != nil && afterAddProductCartCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.AddProductCart")
	}

	if !m.AddProductCartMock.invocationsDone() && afterAddProductCartCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.AddProductCart but found %d calls",
			mm_atomic.LoadUint64(&m.AddProductCartMock.expectedInvocations), afterAddProductCartCounter)
	}
}

type mRepositoryMockCheckSKU struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockCheckSKUExpectation
	expectations       []*RepositoryMockCheckSKUExpectation

	callArgs []*RepositoryMockCheckSKUParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockCheckSKUExpectation specifies expectation struct of the Repository.CheckSKU
type RepositoryMockCheckSKUExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockCheckSKUParams
	paramPtrs *RepositoryMockCheckSKUParamPtrs
	results   *RepositoryMockCheckSKUResults
	Counter   uint64
}

// RepositoryMockCheckSKUParams contains parameters of the Repository.CheckSKU
type RepositoryMockCheckSKUParams struct {
	ctx context.Context
	ch1 chan<- *model.Product
	i1  int64
}

// RepositoryMockCheckSKUParamPtrs contains pointers to parameters of the Repository.CheckSKU
type RepositoryMockCheckSKUParamPtrs struct {
	ctx *context.Context
	ch1 *chan<- *model.Product
	i1  *int64
}

// RepositoryMockCheckSKUResults contains results of the Repository.CheckSKU
type RepositoryMockCheckSKUResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCheckSKU *mRepositoryMockCheckSKU) Optional() *mRepositoryMockCheckSKU {
	mmCheckSKU.optional = true
	return mmCheckSKU
}

// Expect sets up expected params for Repository.CheckSKU
func (mmCheckSKU *mRepositoryMockCheckSKU) Expect(ctx context.Context, ch1 chan<- *model.Product, i1 int64) *mRepositoryMockCheckSKU {
	if mmCheckSKU.mock.funcCheckSKU != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Set")
	}

	if mmCheckSKU.defaultExpectation == nil {
		mmCheckSKU.defaultExpectation = &RepositoryMockCheckSKUExpectation{}
	}

	if mmCheckSKU.defaultExpectation.paramPtrs != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by ExpectParams functions")
	}

	mmCheckSKU.defaultExpectation.params = &RepositoryMockCheckSKUParams{ctx, ch1, i1}
	for _, e := range mmCheckSKU.expectations {
		if minimock.Equal(e.params, mmCheckSKU.defaultExpectation.params) {
			mmCheckSKU.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheckSKU.defaultExpectation.params)
		}
	}

	return mmCheckSKU
}

// ExpectCtxParam1 sets up expected param ctx for Repository.CheckSKU
func (mmCheckSKU *mRepositoryMockCheckSKU) ExpectCtxParam1(ctx context.Context) *mRepositoryMockCheckSKU {
	if mmCheckSKU.mock.funcCheckSKU != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Set")
	}

	if mmCheckSKU.defaultExpectation == nil {
		mmCheckSKU.defaultExpectation = &RepositoryMockCheckSKUExpectation{}
	}

	if mmCheckSKU.defaultExpectation.params != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Expect")
	}

	if mmCheckSKU.defaultExpectation.paramPtrs == nil {
		mmCheckSKU.defaultExpectation.paramPtrs = &RepositoryMockCheckSKUParamPtrs{}
	}
	mmCheckSKU.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCheckSKU
}

// ExpectCh1Param2 sets up expected param ch1 for Repository.CheckSKU
func (mmCheckSKU *mRepositoryMockCheckSKU) ExpectCh1Param2(ch1 chan<- *model.Product) *mRepositoryMockCheckSKU {
	if mmCheckSKU.mock.funcCheckSKU != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Set")
	}

	if mmCheckSKU.defaultExpectation == nil {
		mmCheckSKU.defaultExpectation = &RepositoryMockCheckSKUExpectation{}
	}

	if mmCheckSKU.defaultExpectation.params != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Expect")
	}

	if mmCheckSKU.defaultExpectation.paramPtrs == nil {
		mmCheckSKU.defaultExpectation.paramPtrs = &RepositoryMockCheckSKUParamPtrs{}
	}
	mmCheckSKU.defaultExpectation.paramPtrs.ch1 = &ch1

	return mmCheckSKU
}

// ExpectI1Param3 sets up expected param i1 for Repository.CheckSKU
func (mmCheckSKU *mRepositoryMockCheckSKU) ExpectI1Param3(i1 int64) *mRepositoryMockCheckSKU {
	if mmCheckSKU.mock.funcCheckSKU != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Set")
	}

	if mmCheckSKU.defaultExpectation == nil {
		mmCheckSKU.defaultExpectation = &RepositoryMockCheckSKUExpectation{}
	}

	if mmCheckSKU.defaultExpectation.params != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Expect")
	}

	if mmCheckSKU.defaultExpectation.paramPtrs == nil {
		mmCheckSKU.defaultExpectation.paramPtrs = &RepositoryMockCheckSKUParamPtrs{}
	}
	mmCheckSKU.defaultExpectation.paramPtrs.i1 = &i1

	return mmCheckSKU
}

// Inspect accepts an inspector function that has same arguments as the Repository.CheckSKU
func (mmCheckSKU *mRepositoryMockCheckSKU) Inspect(f func(ctx context.Context, ch1 chan<- *model.Product, i1 int64)) *mRepositoryMockCheckSKU {
	if mmCheckSKU.mock.inspectFuncCheckSKU != nil {
		mmCheckSKU.mock.t.Fatalf("Inspect function is already set for RepositoryMock.CheckSKU")
	}

	mmCheckSKU.mock.inspectFuncCheckSKU = f

	return mmCheckSKU
}

// Return sets up results that will be returned by Repository.CheckSKU
func (mmCheckSKU *mRepositoryMockCheckSKU) Return(err error) *RepositoryMock {
	if mmCheckSKU.mock.funcCheckSKU != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Set")
	}

	if mmCheckSKU.defaultExpectation == nil {
		mmCheckSKU.defaultExpectation = &RepositoryMockCheckSKUExpectation{mock: mmCheckSKU.mock}
	}
	mmCheckSKU.defaultExpectation.results = &RepositoryMockCheckSKUResults{err}
	return mmCheckSKU.mock
}

// Set uses given function f to mock the Repository.CheckSKU method
func (mmCheckSKU *mRepositoryMockCheckSKU) Set(f func(ctx context.Context, ch1 chan<- *model.Product, i1 int64) (err error)) *RepositoryMock {
	if mmCheckSKU.defaultExpectation != nil {
		mmCheckSKU.mock.t.Fatalf("Default expectation is already set for the Repository.CheckSKU method")
	}

	if len(mmCheckSKU.expectations) > 0 {
		mmCheckSKU.mock.t.Fatalf("Some expectations are already set for the Repository.CheckSKU method")
	}

	mmCheckSKU.mock.funcCheckSKU = f
	return mmCheckSKU.mock
}

// When sets expectation for the Repository.CheckSKU which will trigger the result defined by the following
// Then helper
func (mmCheckSKU *mRepositoryMockCheckSKU) When(ctx context.Context, ch1 chan<- *model.Product, i1 int64) *RepositoryMockCheckSKUExpectation {
	if mmCheckSKU.mock.funcCheckSKU != nil {
		mmCheckSKU.mock.t.Fatalf("RepositoryMock.CheckSKU mock is already set by Set")
	}

	expectation := &RepositoryMockCheckSKUExpectation{
		mock:   mmCheckSKU.mock,
		params: &RepositoryMockCheckSKUParams{ctx, ch1, i1},
	}
	mmCheckSKU.expectations = append(mmCheckSKU.expectations, expectation)
	return expectation
}

// Then sets up Repository.CheckSKU return parameters for the expectation previously defined by the When method
func (e *RepositoryMockCheckSKUExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockCheckSKUResults{err}
	return e.mock
}

// Times sets number of times Repository.CheckSKU should be invoked
func (mmCheckSKU *mRepositoryMockCheckSKU) Times(n uint64) *mRepositoryMockCheckSKU {
	if n == 0 {
		mmCheckSKU.mock.t.Fatalf("Times of RepositoryMock.CheckSKU mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCheckSKU.expectedInvocations, n)
	return mmCheckSKU
}

func (mmCheckSKU *mRepositoryMockCheckSKU) invocationsDone() bool {
	if len(mmCheckSKU.expectations) == 0 && mmCheckSKU.defaultExpectation == nil && mmCheckSKU.mock.funcCheckSKU == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCheckSKU.mock.afterCheckSKUCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCheckSKU.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CheckSKU implements add_product.Repository
func (mmCheckSKU *RepositoryMock) CheckSKU(ctx context.Context, ch1 chan<- *model.Product, i1 int64) (err error) {
	mm_atomic.AddUint64(&mmCheckSKU.beforeCheckSKUCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckSKU.afterCheckSKUCounter, 1)

	if mmCheckSKU.inspectFuncCheckSKU != nil {
		mmCheckSKU.inspectFuncCheckSKU(ctx, ch1, i1)
	}

	mm_params := RepositoryMockCheckSKUParams{ctx, ch1, i1}

	// Record call args
	mmCheckSKU.CheckSKUMock.mutex.Lock()
	mmCheckSKU.CheckSKUMock.callArgs = append(mmCheckSKU.CheckSKUMock.callArgs, &mm_params)
	mmCheckSKU.CheckSKUMock.mutex.Unlock()

	for _, e := range mmCheckSKU.CheckSKUMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCheckSKU.CheckSKUMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckSKU.CheckSKUMock.defaultExpectation.Counter, 1)
		mm_want := mmCheckSKU.CheckSKUMock.defaultExpectation.params
		mm_want_ptrs := mmCheckSKU.CheckSKUMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockCheckSKUParams{ctx, ch1, i1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCheckSKU.t.Errorf("RepositoryMock.CheckSKU got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ch1 != nil && !minimock.Equal(*mm_want_ptrs.ch1, mm_got.ch1) {
				mmCheckSKU.t.Errorf("RepositoryMock.CheckSKU got unexpected parameter ch1, want: %#v, got: %#v%s\n", *mm_want_ptrs.ch1, mm_got.ch1, minimock.Diff(*mm_want_ptrs.ch1, mm_got.ch1))
			}

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmCheckSKU.t.Errorf("RepositoryMock.CheckSKU got unexpected parameter i1, want: %#v, got: %#v%s\n", *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheckSKU.t.Errorf("RepositoryMock.CheckSKU got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheckSKU.CheckSKUMock.defaultExpectation.results
		if mm_results == nil {
			mmCheckSKU.t.Fatal("No results are set for the RepositoryMock.CheckSKU")
		}
		return (*mm_results).err
	}
	if mmCheckSKU.funcCheckSKU != nil {
		return mmCheckSKU.funcCheckSKU(ctx, ch1, i1)
	}
	mmCheckSKU.t.Fatalf("Unexpected call to RepositoryMock.CheckSKU. %v %v %v", ctx, ch1, i1)
	return
}

// CheckSKUAfterCounter returns a count of finished RepositoryMock.CheckSKU invocations
func (mmCheckSKU *RepositoryMock) CheckSKUAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckSKU.afterCheckSKUCounter)
}

// CheckSKUBeforeCounter returns a count of RepositoryMock.CheckSKU invocations
func (mmCheckSKU *RepositoryMock) CheckSKUBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckSKU.beforeCheckSKUCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.CheckSKU.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheckSKU *mRepositoryMockCheckSKU) Calls() []*RepositoryMockCheckSKUParams {
	mmCheckSKU.mutex.RLock()

	argCopy := make([]*RepositoryMockCheckSKUParams, len(mmCheckSKU.callArgs))
	copy(argCopy, mmCheckSKU.callArgs)

	mmCheckSKU.mutex.RUnlock()

	return argCopy
}

// MinimockCheckSKUDone returns true if the count of the CheckSKU invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockCheckSKUDone() bool {
	if m.CheckSKUMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CheckSKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CheckSKUMock.invocationsDone()
}

// MinimockCheckSKUInspect logs each unmet expectation
func (m *RepositoryMock) MinimockCheckSKUInspect() {
	for _, e := range m.CheckSKUMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.CheckSKU with params: %#v", *e.params)
		}
	}

	afterCheckSKUCounter := mm_atomic.LoadUint64(&m.afterCheckSKUCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CheckSKUMock.defaultExpectation != nil && afterCheckSKUCounter < 1 {
		if m.CheckSKUMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.CheckSKU")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.CheckSKU with params: %#v", *m.CheckSKUMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckSKU != nil && afterCheckSKUCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.CheckSKU")
	}

	if !m.CheckSKUMock.invocationsDone() && afterCheckSKUCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.CheckSKU but found %d calls",
			mm_atomic.LoadUint64(&m.CheckSKUMock.expectedInvocations), afterCheckSKUCounter)
	}
}

type mRepositoryMockGetProductCart struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockGetProductCartExpectation
	expectations       []*RepositoryMockGetProductCartExpectation

	callArgs []*RepositoryMockGetProductCartParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockGetProductCartExpectation specifies expectation struct of the Repository.GetProductCart
type RepositoryMockGetProductCartExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockGetProductCartParams
	paramPtrs *RepositoryMockGetProductCartParamPtrs
	results   *RepositoryMockGetProductCartResults
	Counter   uint64
}

// RepositoryMockGetProductCartParams contains parameters of the Repository.GetProductCart
type RepositoryMockGetProductCartParams struct {
	ctx context.Context
	pp1 *model.Product
	i1  int64
}

// RepositoryMockGetProductCartParamPtrs contains pointers to parameters of the Repository.GetProductCart
type RepositoryMockGetProductCartParamPtrs struct {
	ctx *context.Context
	pp1 **model.Product
	i1  *int64
}

// RepositoryMockGetProductCartResults contains results of the Repository.GetProductCart
type RepositoryMockGetProductCartResults struct {
	pp2 *model.Product
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProductCart *mRepositoryMockGetProductCart) Optional() *mRepositoryMockGetProductCart {
	mmGetProductCart.optional = true
	return mmGetProductCart
}

// Expect sets up expected params for Repository.GetProductCart
func (mmGetProductCart *mRepositoryMockGetProductCart) Expect(ctx context.Context, pp1 *model.Product, i1 int64) *mRepositoryMockGetProductCart {
	if mmGetProductCart.mock.funcGetProductCart != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Set")
	}

	if mmGetProductCart.defaultExpectation == nil {
		mmGetProductCart.defaultExpectation = &RepositoryMockGetProductCartExpectation{}
	}

	if mmGetProductCart.defaultExpectation.paramPtrs != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by ExpectParams functions")
	}

	mmGetProductCart.defaultExpectation.params = &RepositoryMockGetProductCartParams{ctx, pp1, i1}
	for _, e := range mmGetProductCart.expectations {
		if minimock.Equal(e.params, mmGetProductCart.defaultExpectation.params) {
			mmGetProductCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProductCart.defaultExpectation.params)
		}
	}

	return mmGetProductCart
}

// ExpectCtxParam1 sets up expected param ctx for Repository.GetProductCart
func (mmGetProductCart *mRepositoryMockGetProductCart) ExpectCtxParam1(ctx context.Context) *mRepositoryMockGetProductCart {
	if mmGetProductCart.mock.funcGetProductCart != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Set")
	}

	if mmGetProductCart.defaultExpectation == nil {
		mmGetProductCart.defaultExpectation = &RepositoryMockGetProductCartExpectation{}
	}

	if mmGetProductCart.defaultExpectation.params != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Expect")
	}

	if mmGetProductCart.defaultExpectation.paramPtrs == nil {
		mmGetProductCart.defaultExpectation.paramPtrs = &RepositoryMockGetProductCartParamPtrs{}
	}
	mmGetProductCart.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetProductCart
}

// ExpectPp1Param2 sets up expected param pp1 for Repository.GetProductCart
func (mmGetProductCart *mRepositoryMockGetProductCart) ExpectPp1Param2(pp1 *model.Product) *mRepositoryMockGetProductCart {
	if mmGetProductCart.mock.funcGetProductCart != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Set")
	}

	if mmGetProductCart.defaultExpectation == nil {
		mmGetProductCart.defaultExpectation = &RepositoryMockGetProductCartExpectation{}
	}

	if mmGetProductCart.defaultExpectation.params != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Expect")
	}

	if mmGetProductCart.defaultExpectation.paramPtrs == nil {
		mmGetProductCart.defaultExpectation.paramPtrs = &RepositoryMockGetProductCartParamPtrs{}
	}
	mmGetProductCart.defaultExpectation.paramPtrs.pp1 = &pp1

	return mmGetProductCart
}

// ExpectI1Param3 sets up expected param i1 for Repository.GetProductCart
func (mmGetProductCart *mRepositoryMockGetProductCart) ExpectI1Param3(i1 int64) *mRepositoryMockGetProductCart {
	if mmGetProductCart.mock.funcGetProductCart != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Set")
	}

	if mmGetProductCart.defaultExpectation == nil {
		mmGetProductCart.defaultExpectation = &RepositoryMockGetProductCartExpectation{}
	}

	if mmGetProductCart.defaultExpectation.params != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Expect")
	}

	if mmGetProductCart.defaultExpectation.paramPtrs == nil {
		mmGetProductCart.defaultExpectation.paramPtrs = &RepositoryMockGetProductCartParamPtrs{}
	}
	mmGetProductCart.defaultExpectation.paramPtrs.i1 = &i1

	return mmGetProductCart
}

// Inspect accepts an inspector function that has same arguments as the Repository.GetProductCart
func (mmGetProductCart *mRepositoryMockGetProductCart) Inspect(f func(ctx context.Context, pp1 *model.Product, i1 int64)) *mRepositoryMockGetProductCart {
	if mmGetProductCart.mock.inspectFuncGetProductCart != nil {
		mmGetProductCart.mock.t.Fatalf("Inspect function is already set for RepositoryMock.GetProductCart")
	}

	mmGetProductCart.mock.inspectFuncGetProductCart = f

	return mmGetProductCart
}

// Return sets up results that will be returned by Repository.GetProductCart
func (mmGetProductCart *mRepositoryMockGetProductCart) Return(pp2 *model.Product, err error) *RepositoryMock {
	if mmGetProductCart.mock.funcGetProductCart != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Set")
	}

	if mmGetProductCart.defaultExpectation == nil {
		mmGetProductCart.defaultExpectation = &RepositoryMockGetProductCartExpectation{mock: mmGetProductCart.mock}
	}
	mmGetProductCart.defaultExpectation.results = &RepositoryMockGetProductCartResults{pp2, err}
	return mmGetProductCart.mock
}

// Set uses given function f to mock the Repository.GetProductCart method
func (mmGetProductCart *mRepositoryMockGetProductCart) Set(f func(ctx context.Context, pp1 *model.Product, i1 int64) (pp2 *model.Product, err error)) *RepositoryMock {
	if mmGetProductCart.defaultExpectation != nil {
		mmGetProductCart.mock.t.Fatalf("Default expectation is already set for the Repository.GetProductCart method")
	}

	if len(mmGetProductCart.expectations) > 0 {
		mmGetProductCart.mock.t.Fatalf("Some expectations are already set for the Repository.GetProductCart method")
	}

	mmGetProductCart.mock.funcGetProductCart = f
	return mmGetProductCart.mock
}

// When sets expectation for the Repository.GetProductCart which will trigger the result defined by the following
// Then helper
func (mmGetProductCart *mRepositoryMockGetProductCart) When(ctx context.Context, pp1 *model.Product, i1 int64) *RepositoryMockGetProductCartExpectation {
	if mmGetProductCart.mock.funcGetProductCart != nil {
		mmGetProductCart.mock.t.Fatalf("RepositoryMock.GetProductCart mock is already set by Set")
	}

	expectation := &RepositoryMockGetProductCartExpectation{
		mock:   mmGetProductCart.mock,
		params: &RepositoryMockGetProductCartParams{ctx, pp1, i1},
	}
	mmGetProductCart.expectations = append(mmGetProductCart.expectations, expectation)
	return expectation
}

// Then sets up Repository.GetProductCart return parameters for the expectation previously defined by the When method
func (e *RepositoryMockGetProductCartExpectation) Then(pp2 *model.Product, err error) *RepositoryMock {
	e.results = &RepositoryMockGetProductCartResults{pp2, err}
	return e.mock
}

// Times sets number of times Repository.GetProductCart should be invoked
func (mmGetProductCart *mRepositoryMockGetProductCart) Times(n uint64) *mRepositoryMockGetProductCart {
	if n == 0 {
		mmGetProductCart.mock.t.Fatalf("Times of RepositoryMock.GetProductCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProductCart.expectedInvocations, n)
	return mmGetProductCart
}

func (mmGetProductCart *mRepositoryMockGetProductCart) invocationsDone() bool {
	if len(mmGetProductCart.expectations) == 0 && mmGetProductCart.defaultExpectation == nil && mmGetProductCart.mock.funcGetProductCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProductCart.mock.afterGetProductCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProductCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProductCart implements add_product.Repository
func (mmGetProductCart *RepositoryMock) GetProductCart(ctx context.Context, pp1 *model.Product, i1 int64) (pp2 *model.Product, err error) {
	mm_atomic.AddUint64(&mmGetProductCart.beforeGetProductCartCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProductCart.afterGetProductCartCounter, 1)

	if mmGetProductCart.inspectFuncGetProductCart != nil {
		mmGetProductCart.inspectFuncGetProductCart(ctx, pp1, i1)
	}

	mm_params := RepositoryMockGetProductCartParams{ctx, pp1, i1}

	// Record call args
	mmGetProductCart.GetProductCartMock.mutex.Lock()
	mmGetProductCart.GetProductCartMock.callArgs = append(mmGetProductCart.GetProductCartMock.callArgs, &mm_params)
	mmGetProductCart.GetProductCartMock.mutex.Unlock()

	for _, e := range mmGetProductCart.GetProductCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp2, e.results.err
		}
	}

	if mmGetProductCart.GetProductCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProductCart.GetProductCartMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProductCart.GetProductCartMock.defaultExpectation.params
		mm_want_ptrs := mmGetProductCart.GetProductCartMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockGetProductCartParams{ctx, pp1, i1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetProductCart.t.Errorf("RepositoryMock.GetProductCart got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pp1 != nil && !minimock.Equal(*mm_want_ptrs.pp1, mm_got.pp1) {
				mmGetProductCart.t.Errorf("RepositoryMock.GetProductCart got unexpected parameter pp1, want: %#v, got: %#v%s\n", *mm_want_ptrs.pp1, mm_got.pp1, minimock.Diff(*mm_want_ptrs.pp1, mm_got.pp1))
			}

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmGetProductCart.t.Errorf("RepositoryMock.GetProductCart got unexpected parameter i1, want: %#v, got: %#v%s\n", *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProductCart.t.Errorf("RepositoryMock.GetProductCart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProductCart.GetProductCartMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProductCart.t.Fatal("No results are set for the RepositoryMock.GetProductCart")
		}
		return (*mm_results).pp2, (*mm_results).err
	}
	if mmGetProductCart.funcGetProductCart != nil {
		return mmGetProductCart.funcGetProductCart(ctx, pp1, i1)
	}
	mmGetProductCart.t.Fatalf("Unexpected call to RepositoryMock.GetProductCart. %v %v %v", ctx, pp1, i1)
	return
}

// GetProductCartAfterCounter returns a count of finished RepositoryMock.GetProductCart invocations
func (mmGetProductCart *RepositoryMock) GetProductCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductCart.afterGetProductCartCounter)
}

// GetProductCartBeforeCounter returns a count of RepositoryMock.GetProductCart invocations
func (mmGetProductCart *RepositoryMock) GetProductCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProductCart.beforeGetProductCartCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.GetProductCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProductCart *mRepositoryMockGetProductCart) Calls() []*RepositoryMockGetProductCartParams {
	mmGetProductCart.mutex.RLock()

	argCopy := make([]*RepositoryMockGetProductCartParams, len(mmGetProductCart.callArgs))
	copy(argCopy, mmGetProductCart.callArgs)

	mmGetProductCart.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductCartDone returns true if the count of the GetProductCart invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockGetProductCartDone() bool {
	if m.GetProductCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductCartMock.invocationsDone()
}

// MinimockGetProductCartInspect logs each unmet expectation
func (m *RepositoryMock) MinimockGetProductCartInspect() {
	for _, e := range m.GetProductCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.GetProductCart with params: %#v", *e.params)
		}
	}

	afterGetProductCartCounter := mm_atomic.LoadUint64(&m.afterGetProductCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductCartMock.defaultExpectation != nil && afterGetProductCartCounter < 1 {
		if m.GetProductCartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.GetProductCart")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.GetProductCart with params: %#v", *m.GetProductCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProductCart != nil && afterGetProductCartCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.GetProductCart")
	}

	if !m.GetProductCartMock.invocationsDone() && afterGetProductCartCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.GetProductCart but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductCartMock.expectedInvocations), afterGetProductCartCounter)
	}
}

type mRepositoryMockStockInfo struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockStockInfoExpectation
	expectations       []*RepositoryMockStockInfoExpectation

	callArgs []*RepositoryMockStockInfoParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockStockInfoExpectation specifies expectation struct of the Repository.StockInfo
type RepositoryMockStockInfoExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockStockInfoParams
	paramPtrs *RepositoryMockStockInfoParamPtrs
	results   *RepositoryMockStockInfoResults
	Counter   uint64
}

// RepositoryMockStockInfoParams contains parameters of the Repository.StockInfo
type RepositoryMockStockInfoParams struct {
	ctx context.Context
	i1  int64
}

// RepositoryMockStockInfoParamPtrs contains pointers to parameters of the Repository.StockInfo
type RepositoryMockStockInfoParamPtrs struct {
	ctx *context.Context
	i1  *int64
}

// RepositoryMockStockInfoResults contains results of the Repository.StockInfo
type RepositoryMockStockInfoResults struct {
	i2  int64
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStockInfo *mRepositoryMockStockInfo) Optional() *mRepositoryMockStockInfo {
	mmStockInfo.optional = true
	return mmStockInfo
}

// Expect sets up expected params for Repository.StockInfo
func (mmStockInfo *mRepositoryMockStockInfo) Expect(ctx context.Context, i1 int64) *mRepositoryMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &RepositoryMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.paramPtrs != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by ExpectParams functions")
	}

	mmStockInfo.defaultExpectation.params = &RepositoryMockStockInfoParams{ctx, i1}
	for _, e := range mmStockInfo.expectations {
		if minimock.Equal(e.params, mmStockInfo.defaultExpectation.params) {
			mmStockInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStockInfo.defaultExpectation.params)
		}
	}

	return mmStockInfo
}

// ExpectCtxParam1 sets up expected param ctx for Repository.StockInfo
func (mmStockInfo *mRepositoryMockStockInfo) ExpectCtxParam1(ctx context.Context) *mRepositoryMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &RepositoryMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.params != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by Expect")
	}

	if mmStockInfo.defaultExpectation.paramPtrs == nil {
		mmStockInfo.defaultExpectation.paramPtrs = &RepositoryMockStockInfoParamPtrs{}
	}
	mmStockInfo.defaultExpectation.paramPtrs.ctx = &ctx

	return mmStockInfo
}

// ExpectI1Param2 sets up expected param i1 for Repository.StockInfo
func (mmStockInfo *mRepositoryMockStockInfo) ExpectI1Param2(i1 int64) *mRepositoryMockStockInfo {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &RepositoryMockStockInfoExpectation{}
	}

	if mmStockInfo.defaultExpectation.params != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by Expect")
	}

	if mmStockInfo.defaultExpectation.paramPtrs == nil {
		mmStockInfo.defaultExpectation.paramPtrs = &RepositoryMockStockInfoParamPtrs{}
	}
	mmStockInfo.defaultExpectation.paramPtrs.i1 = &i1

	return mmStockInfo
}

// Inspect accepts an inspector function that has same arguments as the Repository.StockInfo
func (mmStockInfo *mRepositoryMockStockInfo) Inspect(f func(ctx context.Context, i1 int64)) *mRepositoryMockStockInfo {
	if mmStockInfo.mock.inspectFuncStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("Inspect function is already set for RepositoryMock.StockInfo")
	}

	mmStockInfo.mock.inspectFuncStockInfo = f

	return mmStockInfo
}

// Return sets up results that will be returned by Repository.StockInfo
func (mmStockInfo *mRepositoryMockStockInfo) Return(i2 int64, err error) *RepositoryMock {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by Set")
	}

	if mmStockInfo.defaultExpectation == nil {
		mmStockInfo.defaultExpectation = &RepositoryMockStockInfoExpectation{mock: mmStockInfo.mock}
	}
	mmStockInfo.defaultExpectation.results = &RepositoryMockStockInfoResults{i2, err}
	return mmStockInfo.mock
}

// Set uses given function f to mock the Repository.StockInfo method
func (mmStockInfo *mRepositoryMockStockInfo) Set(f func(ctx context.Context, i1 int64) (i2 int64, err error)) *RepositoryMock {
	if mmStockInfo.defaultExpectation != nil {
		mmStockInfo.mock.t.Fatalf("Default expectation is already set for the Repository.StockInfo method")
	}

	if len(mmStockInfo.expectations) > 0 {
		mmStockInfo.mock.t.Fatalf("Some expectations are already set for the Repository.StockInfo method")
	}

	mmStockInfo.mock.funcStockInfo = f
	return mmStockInfo.mock
}

// When sets expectation for the Repository.StockInfo which will trigger the result defined by the following
// Then helper
func (mmStockInfo *mRepositoryMockStockInfo) When(ctx context.Context, i1 int64) *RepositoryMockStockInfoExpectation {
	if mmStockInfo.mock.funcStockInfo != nil {
		mmStockInfo.mock.t.Fatalf("RepositoryMock.StockInfo mock is already set by Set")
	}

	expectation := &RepositoryMockStockInfoExpectation{
		mock:   mmStockInfo.mock,
		params: &RepositoryMockStockInfoParams{ctx, i1},
	}
	mmStockInfo.expectations = append(mmStockInfo.expectations, expectation)
	return expectation
}

// Then sets up Repository.StockInfo return parameters for the expectation previously defined by the When method
func (e *RepositoryMockStockInfoExpectation) Then(i2 int64, err error) *RepositoryMock {
	e.results = &RepositoryMockStockInfoResults{i2, err}
	return e.mock
}

// Times sets number of times Repository.StockInfo should be invoked
func (mmStockInfo *mRepositoryMockStockInfo) Times(n uint64) *mRepositoryMockStockInfo {
	if n == 0 {
		mmStockInfo.mock.t.Fatalf("Times of RepositoryMock.StockInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStockInfo.expectedInvocations, n)
	return mmStockInfo
}

func (mmStockInfo *mRepositoryMockStockInfo) invocationsDone() bool {
	if len(mmStockInfo.expectations) == 0 && mmStockInfo.defaultExpectation == nil && mmStockInfo.mock.funcStockInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStockInfo.mock.afterStockInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStockInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StockInfo implements add_product.Repository
func (mmStockInfo *RepositoryMock) StockInfo(ctx context.Context, i1 int64) (i2 int64, err error) {
	mm_atomic.AddUint64(&mmStockInfo.beforeStockInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStockInfo.afterStockInfoCounter, 1)

	if mmStockInfo.inspectFuncStockInfo != nil {
		mmStockInfo.inspectFuncStockInfo(ctx, i1)
	}

	mm_params := RepositoryMockStockInfoParams{ctx, i1}

	// Record call args
	mmStockInfo.StockInfoMock.mutex.Lock()
	mmStockInfo.StockInfoMock.callArgs = append(mmStockInfo.StockInfoMock.callArgs, &mm_params)
	mmStockInfo.StockInfoMock.mutex.Unlock()

	for _, e := range mmStockInfo.StockInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i2, e.results.err
		}
	}

	if mmStockInfo.StockInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStockInfo.StockInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStockInfo.StockInfoMock.defaultExpectation.params
		mm_want_ptrs := mmStockInfo.StockInfoMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockStockInfoParams{ctx, i1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmStockInfo.t.Errorf("RepositoryMock.StockInfo got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmStockInfo.t.Errorf("RepositoryMock.StockInfo got unexpected parameter i1, want: %#v, got: %#v%s\n", *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStockInfo.t.Errorf("RepositoryMock.StockInfo got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStockInfo.StockInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStockInfo.t.Fatal("No results are set for the RepositoryMock.StockInfo")
		}
		return (*mm_results).i2, (*mm_results).err
	}
	if mmStockInfo.funcStockInfo != nil {
		return mmStockInfo.funcStockInfo(ctx, i1)
	}
	mmStockInfo.t.Fatalf("Unexpected call to RepositoryMock.StockInfo. %v %v", ctx, i1)
	return
}

// StockInfoAfterCounter returns a count of finished RepositoryMock.StockInfo invocations
func (mmStockInfo *RepositoryMock) StockInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfo.afterStockInfoCounter)
}

// StockInfoBeforeCounter returns a count of RepositoryMock.StockInfo invocations
func (mmStockInfo *RepositoryMock) StockInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStockInfo.beforeStockInfoCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.StockInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStockInfo *mRepositoryMockStockInfo) Calls() []*RepositoryMockStockInfoParams {
	mmStockInfo.mutex.RLock()

	argCopy := make([]*RepositoryMockStockInfoParams, len(mmStockInfo.callArgs))
	copy(argCopy, mmStockInfo.callArgs)

	mmStockInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStockInfoDone returns true if the count of the StockInfo invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockStockInfoDone() bool {
	if m.StockInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StockInfoMock.invocationsDone()
}

// MinimockStockInfoInspect logs each unmet expectation
func (m *RepositoryMock) MinimockStockInfoInspect() {
	for _, e := range m.StockInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.StockInfo with params: %#v", *e.params)
		}
	}

	afterStockInfoCounter := mm_atomic.LoadUint64(&m.afterStockInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StockInfoMock.defaultExpectation != nil && afterStockInfoCounter < 1 {
		if m.StockInfoMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.StockInfo")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.StockInfo with params: %#v", *m.StockInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStockInfo != nil && afterStockInfoCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.StockInfo")
	}

	if !m.StockInfoMock.invocationsDone() && afterStockInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.StockInfo but found %d calls",
			mm_atomic.LoadUint64(&m.StockInfoMock.expectedInvocations), afterStockInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddProductCartInspect()

			m.MinimockCheckSKUInspect()

			m.MinimockGetProductCartInspect()

			m.MinimockStockInfoInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddProductCartDone() &&
		m.MinimockCheckSKUDone() &&
		m.MinimockGetProductCartDone() &&
		m.MinimockStockInfoDone()
}
