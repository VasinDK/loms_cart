// Code generated by http://github.com/gojuno/minimock (v3.3.11). DO NOT EDIT.

package mock

//go:generate minimock -i route256/cart/internal/service/item/delete_item.Repository -o repository_mock.go -n RepositoryMock -p mock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// RepositoryMock implements delete_item.Repository
type RepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDeleteProductCart          func(ctx context.Context, i1 int64, i2 int64) (err error)
	inspectFuncDeleteProductCart   func(ctx context.Context, i1 int64, i2 int64)
	afterDeleteProductCartCounter  uint64
	beforeDeleteProductCartCounter uint64
	DeleteProductCartMock          mRepositoryMockDeleteProductCart
}

// NewRepositoryMock returns a mock for delete_item.Repository
func NewRepositoryMock(t minimock.Tester) *RepositoryMock {
	m := &RepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteProductCartMock = mRepositoryMockDeleteProductCart{mock: m}
	m.DeleteProductCartMock.callArgs = []*RepositoryMockDeleteProductCartParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mRepositoryMockDeleteProductCart struct {
	optional           bool
	mock               *RepositoryMock
	defaultExpectation *RepositoryMockDeleteProductCartExpectation
	expectations       []*RepositoryMockDeleteProductCartExpectation

	callArgs []*RepositoryMockDeleteProductCartParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// RepositoryMockDeleteProductCartExpectation specifies expectation struct of the Repository.DeleteProductCart
type RepositoryMockDeleteProductCartExpectation struct {
	mock      *RepositoryMock
	params    *RepositoryMockDeleteProductCartParams
	paramPtrs *RepositoryMockDeleteProductCartParamPtrs
	results   *RepositoryMockDeleteProductCartResults
	Counter   uint64
}

// RepositoryMockDeleteProductCartParams contains parameters of the Repository.DeleteProductCart
type RepositoryMockDeleteProductCartParams struct {
	ctx context.Context
	i1  int64
	i2  int64
}

// RepositoryMockDeleteProductCartParamPtrs contains pointers to parameters of the Repository.DeleteProductCart
type RepositoryMockDeleteProductCartParamPtrs struct {
	ctx *context.Context
	i1  *int64
	i2  *int64
}

// RepositoryMockDeleteProductCartResults contains results of the Repository.DeleteProductCart
type RepositoryMockDeleteProductCartResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option by default unless you really need it, as it helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) Optional() *mRepositoryMockDeleteProductCart {
	mmDeleteProductCart.optional = true
	return mmDeleteProductCart
}

// Expect sets up expected params for Repository.DeleteProductCart
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) Expect(ctx context.Context, i1 int64, i2 int64) *mRepositoryMockDeleteProductCart {
	if mmDeleteProductCart.mock.funcDeleteProductCart != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Set")
	}

	if mmDeleteProductCart.defaultExpectation == nil {
		mmDeleteProductCart.defaultExpectation = &RepositoryMockDeleteProductCartExpectation{}
	}

	if mmDeleteProductCart.defaultExpectation.paramPtrs != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by ExpectParams functions")
	}

	mmDeleteProductCart.defaultExpectation.params = &RepositoryMockDeleteProductCartParams{ctx, i1, i2}
	for _, e := range mmDeleteProductCart.expectations {
		if minimock.Equal(e.params, mmDeleteProductCart.defaultExpectation.params) {
			mmDeleteProductCart.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDeleteProductCart.defaultExpectation.params)
		}
	}

	return mmDeleteProductCart
}

// ExpectCtxParam1 sets up expected param ctx for Repository.DeleteProductCart
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) ExpectCtxParam1(ctx context.Context) *mRepositoryMockDeleteProductCart {
	if mmDeleteProductCart.mock.funcDeleteProductCart != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Set")
	}

	if mmDeleteProductCart.defaultExpectation == nil {
		mmDeleteProductCart.defaultExpectation = &RepositoryMockDeleteProductCartExpectation{}
	}

	if mmDeleteProductCart.defaultExpectation.params != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Expect")
	}

	if mmDeleteProductCart.defaultExpectation.paramPtrs == nil {
		mmDeleteProductCart.defaultExpectation.paramPtrs = &RepositoryMockDeleteProductCartParamPtrs{}
	}
	mmDeleteProductCart.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDeleteProductCart
}

// ExpectI1Param2 sets up expected param i1 for Repository.DeleteProductCart
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) ExpectI1Param2(i1 int64) *mRepositoryMockDeleteProductCart {
	if mmDeleteProductCart.mock.funcDeleteProductCart != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Set")
	}

	if mmDeleteProductCart.defaultExpectation == nil {
		mmDeleteProductCart.defaultExpectation = &RepositoryMockDeleteProductCartExpectation{}
	}

	if mmDeleteProductCart.defaultExpectation.params != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Expect")
	}

	if mmDeleteProductCart.defaultExpectation.paramPtrs == nil {
		mmDeleteProductCart.defaultExpectation.paramPtrs = &RepositoryMockDeleteProductCartParamPtrs{}
	}
	mmDeleteProductCart.defaultExpectation.paramPtrs.i1 = &i1

	return mmDeleteProductCart
}

// ExpectI2Param3 sets up expected param i2 for Repository.DeleteProductCart
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) ExpectI2Param3(i2 int64) *mRepositoryMockDeleteProductCart {
	if mmDeleteProductCart.mock.funcDeleteProductCart != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Set")
	}

	if mmDeleteProductCart.defaultExpectation == nil {
		mmDeleteProductCart.defaultExpectation = &RepositoryMockDeleteProductCartExpectation{}
	}

	if mmDeleteProductCart.defaultExpectation.params != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Expect")
	}

	if mmDeleteProductCart.defaultExpectation.paramPtrs == nil {
		mmDeleteProductCart.defaultExpectation.paramPtrs = &RepositoryMockDeleteProductCartParamPtrs{}
	}
	mmDeleteProductCart.defaultExpectation.paramPtrs.i2 = &i2

	return mmDeleteProductCart
}

// Inspect accepts an inspector function that has same arguments as the Repository.DeleteProductCart
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) Inspect(f func(ctx context.Context, i1 int64, i2 int64)) *mRepositoryMockDeleteProductCart {
	if mmDeleteProductCart.mock.inspectFuncDeleteProductCart != nil {
		mmDeleteProductCart.mock.t.Fatalf("Inspect function is already set for RepositoryMock.DeleteProductCart")
	}

	mmDeleteProductCart.mock.inspectFuncDeleteProductCart = f

	return mmDeleteProductCart
}

// Return sets up results that will be returned by Repository.DeleteProductCart
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) Return(err error) *RepositoryMock {
	if mmDeleteProductCart.mock.funcDeleteProductCart != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Set")
	}

	if mmDeleteProductCart.defaultExpectation == nil {
		mmDeleteProductCart.defaultExpectation = &RepositoryMockDeleteProductCartExpectation{mock: mmDeleteProductCart.mock}
	}
	mmDeleteProductCart.defaultExpectation.results = &RepositoryMockDeleteProductCartResults{err}
	return mmDeleteProductCart.mock
}

// Set uses given function f to mock the Repository.DeleteProductCart method
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) Set(f func(ctx context.Context, i1 int64, i2 int64) (err error)) *RepositoryMock {
	if mmDeleteProductCart.defaultExpectation != nil {
		mmDeleteProductCart.mock.t.Fatalf("Default expectation is already set for the Repository.DeleteProductCart method")
	}

	if len(mmDeleteProductCart.expectations) > 0 {
		mmDeleteProductCart.mock.t.Fatalf("Some expectations are already set for the Repository.DeleteProductCart method")
	}

	mmDeleteProductCart.mock.funcDeleteProductCart = f
	return mmDeleteProductCart.mock
}

// When sets expectation for the Repository.DeleteProductCart which will trigger the result defined by the following
// Then helper
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) When(ctx context.Context, i1 int64, i2 int64) *RepositoryMockDeleteProductCartExpectation {
	if mmDeleteProductCart.mock.funcDeleteProductCart != nil {
		mmDeleteProductCart.mock.t.Fatalf("RepositoryMock.DeleteProductCart mock is already set by Set")
	}

	expectation := &RepositoryMockDeleteProductCartExpectation{
		mock:   mmDeleteProductCart.mock,
		params: &RepositoryMockDeleteProductCartParams{ctx, i1, i2},
	}
	mmDeleteProductCart.expectations = append(mmDeleteProductCart.expectations, expectation)
	return expectation
}

// Then sets up Repository.DeleteProductCart return parameters for the expectation previously defined by the When method
func (e *RepositoryMockDeleteProductCartExpectation) Then(err error) *RepositoryMock {
	e.results = &RepositoryMockDeleteProductCartResults{err}
	return e.mock
}

// Times sets number of times Repository.DeleteProductCart should be invoked
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) Times(n uint64) *mRepositoryMockDeleteProductCart {
	if n == 0 {
		mmDeleteProductCart.mock.t.Fatalf("Times of RepositoryMock.DeleteProductCart mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDeleteProductCart.expectedInvocations, n)
	return mmDeleteProductCart
}

func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) invocationsDone() bool {
	if len(mmDeleteProductCart.expectations) == 0 && mmDeleteProductCart.defaultExpectation == nil && mmDeleteProductCart.mock.funcDeleteProductCart == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDeleteProductCart.mock.afterDeleteProductCartCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDeleteProductCart.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// DeleteProductCart implements delete_item.Repository
func (mmDeleteProductCart *RepositoryMock) DeleteProductCart(ctx context.Context, i1 int64, i2 int64) (err error) {
	mm_atomic.AddUint64(&mmDeleteProductCart.beforeDeleteProductCartCounter, 1)
	defer mm_atomic.AddUint64(&mmDeleteProductCart.afterDeleteProductCartCounter, 1)

	if mmDeleteProductCart.inspectFuncDeleteProductCart != nil {
		mmDeleteProductCart.inspectFuncDeleteProductCart(ctx, i1, i2)
	}

	mm_params := RepositoryMockDeleteProductCartParams{ctx, i1, i2}

	// Record call args
	mmDeleteProductCart.DeleteProductCartMock.mutex.Lock()
	mmDeleteProductCart.DeleteProductCartMock.callArgs = append(mmDeleteProductCart.DeleteProductCartMock.callArgs, &mm_params)
	mmDeleteProductCart.DeleteProductCartMock.mutex.Unlock()

	for _, e := range mmDeleteProductCart.DeleteProductCartMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDeleteProductCart.DeleteProductCartMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDeleteProductCart.DeleteProductCartMock.defaultExpectation.Counter, 1)
		mm_want := mmDeleteProductCart.DeleteProductCartMock.defaultExpectation.params
		mm_want_ptrs := mmDeleteProductCart.DeleteProductCartMock.defaultExpectation.paramPtrs

		mm_got := RepositoryMockDeleteProductCartParams{ctx, i1, i2}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDeleteProductCart.t.Errorf("RepositoryMock.DeleteProductCart got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.i1 != nil && !minimock.Equal(*mm_want_ptrs.i1, mm_got.i1) {
				mmDeleteProductCart.t.Errorf("RepositoryMock.DeleteProductCart got unexpected parameter i1, want: %#v, got: %#v%s\n", *mm_want_ptrs.i1, mm_got.i1, minimock.Diff(*mm_want_ptrs.i1, mm_got.i1))
			}

			if mm_want_ptrs.i2 != nil && !minimock.Equal(*mm_want_ptrs.i2, mm_got.i2) {
				mmDeleteProductCart.t.Errorf("RepositoryMock.DeleteProductCart got unexpected parameter i2, want: %#v, got: %#v%s\n", *mm_want_ptrs.i2, mm_got.i2, minimock.Diff(*mm_want_ptrs.i2, mm_got.i2))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDeleteProductCart.t.Errorf("RepositoryMock.DeleteProductCart got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDeleteProductCart.DeleteProductCartMock.defaultExpectation.results
		if mm_results == nil {
			mmDeleteProductCart.t.Fatal("No results are set for the RepositoryMock.DeleteProductCart")
		}
		return (*mm_results).err
	}
	if mmDeleteProductCart.funcDeleteProductCart != nil {
		return mmDeleteProductCart.funcDeleteProductCart(ctx, i1, i2)
	}
	mmDeleteProductCart.t.Fatalf("Unexpected call to RepositoryMock.DeleteProductCart. %v %v %v", ctx, i1, i2)
	return
}

// DeleteProductCartAfterCounter returns a count of finished RepositoryMock.DeleteProductCart invocations
func (mmDeleteProductCart *RepositoryMock) DeleteProductCartAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteProductCart.afterDeleteProductCartCounter)
}

// DeleteProductCartBeforeCounter returns a count of RepositoryMock.DeleteProductCart invocations
func (mmDeleteProductCart *RepositoryMock) DeleteProductCartBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDeleteProductCart.beforeDeleteProductCartCounter)
}

// Calls returns a list of arguments used in each call to RepositoryMock.DeleteProductCart.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDeleteProductCart *mRepositoryMockDeleteProductCart) Calls() []*RepositoryMockDeleteProductCartParams {
	mmDeleteProductCart.mutex.RLock()

	argCopy := make([]*RepositoryMockDeleteProductCartParams, len(mmDeleteProductCart.callArgs))
	copy(argCopy, mmDeleteProductCart.callArgs)

	mmDeleteProductCart.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteProductCartDone returns true if the count of the DeleteProductCart invocations corresponds
// the number of defined expectations
func (m *RepositoryMock) MinimockDeleteProductCartDone() bool {
	if m.DeleteProductCartMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteProductCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteProductCartMock.invocationsDone()
}

// MinimockDeleteProductCartInspect logs each unmet expectation
func (m *RepositoryMock) MinimockDeleteProductCartInspect() {
	for _, e := range m.DeleteProductCartMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RepositoryMock.DeleteProductCart with params: %#v", *e.params)
		}
	}

	afterDeleteProductCartCounter := mm_atomic.LoadUint64(&m.afterDeleteProductCartCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteProductCartMock.defaultExpectation != nil && afterDeleteProductCartCounter < 1 {
		if m.DeleteProductCartMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RepositoryMock.DeleteProductCart")
		} else {
			m.t.Errorf("Expected call to RepositoryMock.DeleteProductCart with params: %#v", *m.DeleteProductCartMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDeleteProductCart != nil && afterDeleteProductCartCounter < 1 {
		m.t.Error("Expected call to RepositoryMock.DeleteProductCart")
	}

	if !m.DeleteProductCartMock.invocationsDone() && afterDeleteProductCartCounter > 0 {
		m.t.Errorf("Expected %d calls to RepositoryMock.DeleteProductCart but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteProductCartMock.expectedInvocations), afterDeleteProductCartCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteProductCartInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteProductCartDone()
}
